{
  "version": "2.0",
  "service": "<p>An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. </p>",
  "operations": {
    "CreateContainer": "<p>Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.</p>",
    "DeleteContainer": "<p>Deletes the specified container. Before you make a <code>DeleteContainer</code> request, delete any objects in the container or in any folders in the container. You can delete only empty containers. </p>",
    "DeleteContainerPolicy": "<p>Deletes the access policy that is associated with the specified container.</p>",
    "DeleteCorsPolicy": "<p>Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission by default and can grant this permission to others.</p>",
    "DeleteLifecyclePolicy": "<p>Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.</p>",
    "DescribeContainer": "<p>Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container's endpoint does not change after it has been assigned. The <code>DescribeContainer</code> request returns a single <code>Container</code> object based on <code>ContainerName</code>. To return all <code>Container</code> objects that are associated with a specified AWS account, use <a>ListContainers</a>.</p>",
    "GetContainerPolicy": "<p>Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.</p>",
    "GetCorsPolicy": "<p>Returns the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this permission and can grant it to others.</p>",
    "GetLifecyclePolicy": "<p>Retrieves the object lifecycle policy that is assigned to a container.</p>",
    "ListContainers": "<p>Lists the properties of all containers in AWS Elemental MediaStore. </p> <p>You can query to receive all the containers in one response. Or you can include the <code>MaxResults</code> parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the <code>NextToken</code> parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. </p> <p>See also <a>DescribeContainer</a>, which gets the properties of one container. </p>",
    "PutContainerPolicy": "<p>Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.</p> <p>For this release of the REST API, you can create only one policy for a container. If you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing policy. </p>",
    "PutCorsPolicy": "<p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser's XMLHttpRequest capability.</p> <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p> <p>To learn more about CORS, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html\">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>",
    "PutLifecyclePolicy": "<p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p> <p>For information about how to construct an object lifecycle policy, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html\">Components of an Object Lifecycle Policy</a>.</p>",
    "StartAccessLogging": "<p>Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.</p>",
    "StopAccessLogging": "<p>Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.</p>"
  },
  "shapes": {
    "AllowedHeaders": {
      "base": null,
      "refs": {
        "CorsRule$AllowedHeaders": "<p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p> <p>This element can contain only one wildcard character (*).</p>"
      }
    },
    "AllowedMethods": {
      "base": null,
      "refs": {
        "CorsRule$AllowedMethods": "<p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p> <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>"
      }
    },
    "AllowedOrigins": {
      "base": null,
      "refs": {
        "CorsRule$AllowedOrigins": "<p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>"
      }
    },
    "Container": {
      "base": "<p>This section describes operations that you can perform on an AWS Elemental MediaStore container.</p>",
      "refs": {
        "ContainerList$member": null,
        "CreateContainerOutput$Container": "<p>ContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:&lt;region&gt;:&lt;account that owns this container&gt;:container/&lt;name of container&gt;. For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p> <p>ContainerName: The container name as specified in the request.</p> <p>CreationTime: Unix time stamp.</p> <p>Status: The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When an endpoint is available, the status changes to <code>ACTIVE</code>.</p> <p>The return value does not include the container's endpoint. To make downstream requests, you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>",
        "DescribeContainerOutput$Container": "<p>The name of the queried container.</p>"
      }
    },
    "ContainerARN": {
      "base": null,
      "refs": {
        "Container$ARN": "<p>The Amazon Resource Name (ARN) of the container. The ARN has the following format:</p> <p>arn:aws:&lt;region&gt;:&lt;account that owns this container&gt;:container/&lt;name of container&gt; </p> <p>For example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p>"
      }
    },
    "ContainerAccessLoggingEnabled": {
      "base": null,
      "refs": {
        "Container$AccessLoggingEnabled": "<p>The state of access logging on the container. This value is <code>false</code> by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to <code>true</code>, indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.</p>"
      }
    },
    "ContainerInUseException": {
      "base": "<p>The container that you specified in the request already exists or is being updated.</p>",
      "refs": {
      }
    },
    "ContainerList": {
      "base": null,
      "refs": {
        "ListContainersOutput$Containers": "<p>The names of the containers.</p>"
      }
    },
    "ContainerListLimit": {
      "base": null,
      "refs": {
        "ListContainersInput$MaxResults": "<p>Enter the maximum number of containers in the response. Use from 1 to 255 characters. </p>"
      }
    },
    "ContainerName": {
      "base": null,
      "refs": {
        "Container$Name": "<p>The name of the container.</p>",
        "CreateContainerInput$ContainerName": "<p>The name for the container. The name must be from 1 to 255 characters. Container names must be unique to your AWS account within a specific region. As an example, you could create a container named <code>movies</code> in every region, as long as you don’t have an existing container with that name.</p>",
        "DeleteContainerInput$ContainerName": "<p>The name of the container to delete. </p>",
        "DeleteContainerPolicyInput$ContainerName": "<p>The name of the container that holds the policy.</p>",
        "DeleteCorsPolicyInput$ContainerName": "<p>The name of the container to remove the policy from.</p>",
        "DeleteLifecyclePolicyInput$ContainerName": "<p>The name of the container that holds the object lifecycle policy.</p>",
        "DescribeContainerInput$ContainerName": "<p>The name of the container to query.</p>",
        "GetContainerPolicyInput$ContainerName": "<p>The name of the container. </p>",
        "GetCorsPolicyInput$ContainerName": "<p>The name of the container that the policy is assigned to.</p>",
        "GetLifecyclePolicyInput$ContainerName": "<p>The name of the container that the object lifecycle policy is assigned to.</p>",
        "PutContainerPolicyInput$ContainerName": "<p>The name of the container.</p>",
        "PutCorsPolicyInput$ContainerName": "<p>The name of the container that you want to assign the CORS policy to.</p>",
        "PutLifecyclePolicyInput$ContainerName": "<p>The name of the container that you want to assign the object lifecycle policy to.</p>",
        "StartAccessLoggingInput$ContainerName": "<p>The name of the container that you want to start access logging on.</p>",
        "StopAccessLoggingInput$ContainerName": "<p>The name of the container that you want to stop access logging on.</p>"
      }
    },
    "ContainerNotFoundException": {
      "base": "<p>The container that you specified in the request does not exist.</p>",
      "refs": {
      }
    },
    "ContainerPolicy": {
      "base": null,
      "refs": {
        "GetContainerPolicyOutput$Policy": "<p>The contents of the access policy.</p>",
        "PutContainerPolicyInput$Policy": "<p>The contents of the policy, which includes the following: </p> <ul> <li> <p>One <code>Version</code> tag</p> </li> <li> <p>One <code>Statement</code> tag that contains the standard tags for the policy.</p> </li> </ul>"
      }
    },
    "ContainerStatus": {
      "base": null,
      "refs": {
        "Container$Status": "<p>The status of container creation or deletion. The status is one of the following: <code>CREATING</code>, <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating the container, the status is <code>CREATING</code>. When the endpoint is available, the status changes to <code>ACTIVE</code>.</p>"
      }
    },
    "CorsPolicy": {
      "base": "<p>The CORS policy of the container. </p>",
      "refs": {
        "GetCorsPolicyOutput$CorsPolicy": "<p>The CORS policy assigned to the container.</p>",
        "PutCorsPolicyInput$CorsPolicy": "<p>The CORS policy to apply to the container. </p>"
      }
    },
    "CorsPolicyNotFoundException": {
      "base": "<p>The CORS policy that you specified in the request does not exist.</p>",
      "refs": {
      }
    },
    "CorsRule": {
      "base": "<p>A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p>",
      "refs": {
        "CorsPolicy$member": null
      }
    },
    "CreateContainerInput": {
      "base": null,
      "refs": {
      }
    },
    "CreateContainerOutput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteContainerInput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteContainerOutput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteContainerPolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteContainerPolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteCorsPolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteCorsPolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteLifecyclePolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteLifecyclePolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "DescribeContainerInput": {
      "base": null,
      "refs": {
      }
    },
    "DescribeContainerOutput": {
      "base": null,
      "refs": {
      }
    },
    "Endpoint": {
      "base": null,
      "refs": {
        "Container$Endpoint": "<p>The DNS endpoint of the container. Use the endpoint to identify the specific container when sending requests to the data plane. The service assigns this value when the container is created. Once the value has been assigned, it does not change.</p>"
      }
    },
    "ErrorMessage": {
      "base": null,
      "refs": {
        "ContainerInUseException$Message": null,
        "ContainerNotFoundException$Message": null,
        "CorsPolicyNotFoundException$Message": null,
        "InternalServerError$Message": null,
        "LimitExceededException$Message": null,
        "PolicyNotFoundException$Message": null
      }
    },
    "ExposeHeaders": {
      "base": null,
      "refs": {
        "CorsRule$ExposeHeaders": "<p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>This element is optional for each rule.</p>"
      }
    },
    "GetContainerPolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "GetContainerPolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "GetCorsPolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "GetCorsPolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "GetLifecyclePolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "GetLifecyclePolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "Header": {
      "base": null,
      "refs": {
        "AllowedHeaders$member": null,
        "ExposeHeaders$member": null
      }
    },
    "InternalServerError": {
      "base": "<p>The service is temporarily unavailable.</p>",
      "refs": {
      }
    },
    "LifecyclePolicy": {
      "base": null,
      "refs": {
        "GetLifecyclePolicyOutput$LifecyclePolicy": "<p>The object lifecycle policy that is assigned to the container.</p>",
        "PutLifecyclePolicyInput$LifecyclePolicy": "<p>The object lifecycle policy to apply to the container.</p>"
      }
    },
    "LimitExceededException": {
      "base": "<p>A service limit has been exceeded.</p>",
      "refs": {
      }
    },
    "ListContainersInput": {
      "base": null,
      "refs": {
      }
    },
    "ListContainersOutput": {
      "base": null,
      "refs": {
      }
    },
    "MaxAgeSeconds": {
      "base": null,
      "refs": {
        "CorsRule$MaxAgeSeconds": "<p>The time in seconds that your browser caches the preflight response for the specified resource.</p> <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>"
      }
    },
    "MethodName": {
      "base": null,
      "refs": {
        "AllowedMethods$member": null
      }
    },
    "Origin": {
      "base": null,
      "refs": {
        "AllowedOrigins$member": null
      }
    },
    "PaginationToken": {
      "base": null,
      "refs": {
        "ListContainersInput$NextToken": "<p>Only if you used <code>MaxResults</code> in the first command, enter the token (which was included in the previous response) to obtain the next set of containers. This token is included in a response only if there actually are more containers to list.</p>",
        "ListContainersOutput$NextToken": "<p> <code>NextToken</code> is the token to use in the next call to <code>ListContainers</code>. This token is returned only if you included the <code>MaxResults</code> tag in the original command, and only if there are still containers to return. </p>"
      }
    },
    "PolicyNotFoundException": {
      "base": "<p>The policy that you specified in the request does not exist.</p>",
      "refs": {
      }
    },
    "PutContainerPolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "PutContainerPolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "PutCorsPolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "PutCorsPolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "PutLifecyclePolicyInput": {
      "base": null,
      "refs": {
      }
    },
    "PutLifecyclePolicyOutput": {
      "base": null,
      "refs": {
      }
    },
    "StartAccessLoggingInput": {
      "base": null,
      "refs": {
      }
    },
    "StartAccessLoggingOutput": {
      "base": null,
      "refs": {
      }
    },
    "StopAccessLoggingInput": {
      "base": null,
      "refs": {
      }
    },
    "StopAccessLoggingOutput": {
      "base": null,
      "refs": {
      }
    },
    "TimeStamp": {
      "base": null,
      "refs": {
        "Container$CreationTime": "<p>Unix timestamp.</p>"
      }
    }
  }
}
