{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://firestore.googleapis.com/",
  "batchPath": "batch",
  "canonicalName": "Firestore",
  "description": "Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development.\n",
  "discoveryVersion": "v1",
  "documentationLink": "https://cloud.google.com/firestore",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "firestore:v1beta2",
  "kind": "discovery#restDescription",
  "name": "firestore",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "databases": {
          "methods": {
            "exportDocuments": {
              "description": "Exports a copy of all or a subset of documents from Google Cloud Firestore\nto another storage system, such as Google Cloud Storage. Recent updates to\ndocuments may not be reflected in the export. The export occurs in the\nbackground and its progress can be monitored and managed via the\nOperation resource that is created. The output of an export may only be\nused once the associated operation is done. If an export operation is\ncancelled before completion it may leave partial data behind in Google\nCloud Storage.",
              "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}:exportDocuments",
              "httpMethod": "POST",
              "id": "firestore.projects.databases.exportDocuments",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Database to export. Should be of the form:\n`projects/{project_id}/databases/{database_id}`.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1beta2/{+name}:exportDocuments",
              "request": {
                "$ref": "GoogleFirestoreAdminV1beta2ExportDocumentsRequest"
              },
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "importDocuments": {
              "description": "Imports documents into Google Cloud Firestore. Existing documents with the\nsame name are overwritten. The import occurs in the background and its\nprogress can be monitored and managed via the Operation resource that is\ncreated. If an ImportDocuments operation is cancelled, it is possible\nthat a subset of the data has already been imported to Cloud Firestore.",
              "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}:importDocuments",
              "httpMethod": "POST",
              "id": "firestore.projects.databases.importDocuments",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Database to import into. Should be of the form:\n`projects/{project_id}/databases/{database_id}`.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/databases/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1beta2/{+name}:importDocuments",
              "request": {
                "$ref": "GoogleFirestoreAdminV1beta2ImportDocumentsRequest"
              },
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            }
          },
          "resources": {
            "collectionGroups": {
              "resources": {
                "fields": {
                  "methods": {
                    "get": {
                      "description": "Gets the metadata and configuration for a Field.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "httpMethod": "GET",
                      "id": "firestore.projects.databases.collectionGroups.fields.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "A name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+name}",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2Field"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "list": {
                      "description": "Lists the field configuration and metadata for this database.\n\nCurrently, FirestoreAdmin.ListFields only supports listing fields\nthat have been explicitly overridden. To issue this query, call\nFirestoreAdmin.ListFields with the filter set to\n`indexConfig.usesAncestorConfig:false`.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields",
                      "httpMethod": "GET",
                      "id": "firestore.projects.databases.collectionGroups.fields.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "The filter to apply to list results. Currently,\nFirestoreAdmin.ListFields only supports listing fields\nthat have been explicitly overridden. To issue this query, call\nFirestoreAdmin.ListFields with the filter set to\n`indexConfig.usesAncestorConfig:false`.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The number of results to return.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "A page token, returned from a previous call to\nFirestoreAdmin.ListFields, that may be used to get the next\npage of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "A parent name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+parent}/fields",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2ListFieldsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "patch": {
                      "description": "Updates a field configuration. Currently, field updates apply only to\nsingle field index configuration. However, calls to\nFirestoreAdmin.UpdateField should provide a field mask to avoid\nchanging any configuration that the caller isn't aware of. The field mask\nshould be specified as: `{ paths: \"index_config\" }`.\n\nThis call returns a google.longrunning.Operation which may be used to\ntrack the status of the field update. The metadata for\nthe operation will be the type FieldOperationMetadata.\n\nTo configure the default field settings for the database, use\nthe special `Field` with resource name:\n`projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
                      "httpMethod": "PATCH",
                      "id": "firestore.projects.databases.collectionGroups.fields.patch",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "A field name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`\n\nA field path may be a simple field name, e.g. `address` or a path to fields\nwithin map_value , e.g. `address.city`,\nor a special field path. The only valid special field is `*`, which\nrepresents any field.\n\nField paths may be quoted using ` (backtick). The only character that needs\nto be escaped within a quoted field path is the backtick character itself,\nescaped using a backslash. Special characters in field paths that\nmust be quoted include: `*`, `.`,\n``` (backtick), `[`, `]`, as well as any ascii symbolic characters.\n\nExamples:\n(Note: Comments here are written in markdown syntax, so there is an\n additional layer of backticks to represent a code block)\n`\\`address.city\\`` represents a field named `address.city`, not the map key\n`city` in the field `address`.\n`\\`*\\`` represents a field named `*`, not any field.\n\nA special `Field` contains the default indexing settings for all fields.\nThis field's resource name is:\n`projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`\nIndexes defined on this `Field` will be applied to all fields which do not\nhave their own `Field` index configuration.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "A mask, relative to the field. If specified, only configuration specified\nby this field_mask will be updated in the field.",
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+name}",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1beta2Field"
                      },
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    }
                  }
                },
                "indexes": {
                  "methods": {
                    "create": {
                      "description": "Creates a composite index. This returns a google.longrunning.Operation\nwhich may be used to track the status of the creation. The metadata for\nthe operation will be the type IndexOperationMetadata.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
                      "httpMethod": "POST",
                      "id": "firestore.projects.databases.collectionGroups.indexes.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "parent": {
                          "description": "A parent name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+parent}/indexes",
                      "request": {
                        "$ref": "GoogleFirestoreAdminV1beta2Index"
                      },
                      "response": {
                        "$ref": "GoogleLongrunningOperation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "delete": {
                      "description": "Deletes a composite index.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
                      "httpMethod": "DELETE",
                      "id": "firestore.projects.databases.collectionGroups.indexes.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "A name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "get": {
                      "description": "Gets a composite index.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
                      "httpMethod": "GET",
                      "id": "firestore.projects.databases.collectionGroups.indexes.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "A name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+name}",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2Index"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    },
                    "list": {
                      "description": "Lists composite indexes.",
                      "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
                      "httpMethod": "GET",
                      "id": "firestore.projects.databases.collectionGroups.indexes.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "The filter to apply to list results.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The number of results to return.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "A page token, returned from a previous call to\nFirestoreAdmin.ListIndexes, that may be used to get the next\npage of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "A parent name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1beta2/{+parent}/indexes",
                      "response": {
                        "$ref": "GoogleFirestoreAdminV1beta2ListIndexesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform",
                        "https://www.googleapis.com/auth/datastore"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "revision": "20190323",
  "rootUrl": "https://firestore.googleapis.com/",
  "schemas": {
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty",
      "properties": {},
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ExportDocumentsMetadata": {
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.ExportDocuments.",
      "id": "GoogleFirestoreAdminV1beta2ExportDocumentsMetadata",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids are being exported.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "endTime": {
          "description": "The time this operation completed. Will be unset if operation still in\nprogress.",
          "format": "google-datetime",
          "type": "string"
        },
        "operationState": {
          "description": "The state of the export operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        },
        "outputUriPrefix": {
          "description": "Where the entities are being exported to.",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in documents, of this operation."
        },
        "startTime": {
          "description": "The time this operation started.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ExportDocumentsRequest": {
      "description": "The request for FirestoreAdmin.ExportDocuments.",
      "id": "GoogleFirestoreAdminV1beta2ExportDocumentsRequest",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids to export. Unspecified means all collections.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "outputUriPrefix": {
          "description": "The output URI. Currently only supports Google Cloud Storage URIs of the\nform: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\nof the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\nGoogle Cloud Storage namespace path. When\nchoosing a name, be sure to consider Google Cloud Storage naming\nguidelines: https://cloud.google.com/storage/docs/naming.\nIf the URI is a bucket (without a namespace path), a prefix will be\ngenerated based on the start time.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ExportDocumentsResponse": {
      "description": "Returned in the google.longrunning.Operation response field.",
      "id": "GoogleFirestoreAdminV1beta2ExportDocumentsResponse",
      "properties": {
        "outputUriPrefix": {
          "description": "Location of the output files. This can be used to begin an import\ninto Cloud Firestore (this project or another project) after the operation\ncompletes successfully.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2Field": {
      "description": "Represents a single field in the database.\n\nFields are grouped by their \"Collection Group\", which represent all\ncollections in the database with the same id.",
      "id": "GoogleFirestoreAdminV1beta2Field",
      "properties": {
        "indexConfig": {
          "$ref": "GoogleFirestoreAdminV1beta2IndexConfig",
          "description": "The index configuration for this field. If unset, field indexing will\nrevert to the configuration defined by the `ancestor_field`. To\nexplicitly remove all indexes for this field, specify an index config\nwith an empty list of indexes."
        },
        "name": {
          "description": "A field name of the form\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`\n\nA field path may be a simple field name, e.g. `address` or a path to fields\nwithin map_value , e.g. `address.city`,\nor a special field path. The only valid special field is `*`, which\nrepresents any field.\n\nField paths may be quoted using ` (backtick). The only character that needs\nto be escaped within a quoted field path is the backtick character itself,\nescaped using a backslash. Special characters in field paths that\nmust be quoted include: `*`, `.`,\n``` (backtick), `[`, `]`, as well as any ascii symbolic characters.\n\nExamples:\n(Note: Comments here are written in markdown syntax, so there is an\n additional layer of backticks to represent a code block)\n`\\`address.city\\`` represents a field named `address.city`, not the map key\n`city` in the field `address`.\n`\\`*\\`` represents a field named `*`, not any field.\n\nA special `Field` contains the default indexing settings for all fields.\nThis field's resource name is:\n`projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`\nIndexes defined on this `Field` will be applied to all fields which do not\nhave their own `Field` index configuration.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2FieldOperationMetadata": {
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.UpdateField.",
      "id": "GoogleFirestoreAdminV1beta2FieldOperationMetadata",
      "properties": {
        "bytesProgress": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "documentProgress": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in documents, of this operation."
        },
        "endTime": {
          "description": "The time this operation completed. Will be unset if operation still in\nprogress.",
          "format": "google-datetime",
          "type": "string"
        },
        "field": {
          "description": "The field resource that this operation is acting on. For example:\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`",
          "type": "string"
        },
        "indexConfigDeltas": {
          "description": "A list of IndexConfigDelta, which describe the intent of this\noperation.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2IndexConfigDelta"
          },
          "type": "array"
        },
        "startTime": {
          "description": "The time this operation started.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "The state of the operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ImportDocumentsMetadata": {
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.ImportDocuments.",
      "id": "GoogleFirestoreAdminV1beta2ImportDocumentsMetadata",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids are being imported.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "endTime": {
          "description": "The time this operation completed. Will be unset if operation still in\nprogress.",
          "format": "google-datetime",
          "type": "string"
        },
        "inputUriPrefix": {
          "description": "The location of the documents being imported.",
          "type": "string"
        },
        "operationState": {
          "description": "The state of the import operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in documents, of this operation."
        },
        "startTime": {
          "description": "The time this operation started.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ImportDocumentsRequest": {
      "description": "The request for FirestoreAdmin.ImportDocuments.",
      "id": "GoogleFirestoreAdminV1beta2ImportDocumentsRequest",
      "properties": {
        "collectionIds": {
          "description": "Which collection ids to import. Unspecified means all collections included\nin the import.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "inputUriPrefix": {
          "description": "Location of the exported files.\nThis must match the output_uri_prefix of an ExportDocumentsResponse from\nan export that has completed successfully.\nSee:\ngoogle.firestore.admin.v1beta2.ExportDocumentsResponse.output_uri_prefix.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2Index": {
      "description": "Cloud Firestore indexes enable simple and complex queries against\ndocuments in a database.",
      "id": "GoogleFirestoreAdminV1beta2Index",
      "properties": {
        "fields": {
          "description": "The fields supported by this index.\n\nFor composite indexes, this is always 2 or more fields.\nThe last field entry is always for the field path `__name__`. If, on\ncreation, `__name__` was not specified as the last field, it will be added\nautomatically with the same direction as that of the last field defined. If\nthe final field in a composite index is not directional, the `__name__`\nwill be ordered ASCENDING (unless explicitly specified).\n\nFor single field indexes, this will always be exactly one entry with a\nfield path equal to the field path of the associated field.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2IndexField"
          },
          "type": "array"
        },
        "name": {
          "description": "Output only.\nA server defined name for this index.\nThe form of this name for composite indexes will be:\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`\nFor single field indexes, this field will be empty.",
          "type": "string"
        },
        "queryScope": {
          "description": "Indexes with a collection query scope specified allow queries\nagainst a collection that is the child of a specific document, specified at\nquery time, and that has the same collection id.\n\nIndexes with a collection group query scope specified allow queries against\nall collections descended from a specific document, specified at query\ntime, and that have the same collection id as this index.",
          "enum": [
            "QUERY_SCOPE_UNSPECIFIED",
            "COLLECTION"
          ],
          "enumDescriptions": [
            "The query scope is unspecified. Not a valid option.",
            "Indexes with a collection query scope specified allow queries\nagainst a collection that is the child of a specific document, specified\nat query time, and that has the collection id specified by the index."
          ],
          "type": "string"
        },
        "state": {
          "description": "Output only.\nThe serving state of the index.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "NEEDS_REPAIR"
          ],
          "enumDescriptions": [
            "The state is unspecified.",
            "The index is being created.\nThere is an active long-running operation for the index.\nThe index is updated when writing a document.\nSome index data may exist.",
            "The index is ready to be used.\nThe index is updated when writing a document.\nThe index is fully populated from all stored documents it applies to.",
            "The index was being created, but something went wrong.\nThere is no active long-running operation for the index,\nand the most recently finished long-running operation failed.\nThe index is not updated when writing a document.\nSome index data may exist.\nUse the google.longrunning.Operations API to determine why the operation\nthat last attempted to create this index failed, then re-create the\nindex."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2IndexConfig": {
      "description": "The index configuration for this field.",
      "id": "GoogleFirestoreAdminV1beta2IndexConfig",
      "properties": {
        "ancestorField": {
          "description": "Output only.\nSpecifies the resource name of the `Field` from which this field's\nindex configuration is set (when `uses_ancestor_config` is true),\nor from which it *would* be set if this field had no index configuration\n(when `uses_ancestor_config` is false).",
          "type": "string"
        },
        "indexes": {
          "description": "The indexes supported for this field.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2Index"
          },
          "type": "array"
        },
        "reverting": {
          "description": "Output only\nWhen true, the `Field`'s index configuration is in the process of being\nreverted. Once complete, the index config will transition to the same\nstate as the field specified by `ancestor_field`, at which point\n`uses_ancestor_config` will be `true` and `reverting` will be `false`.",
          "type": "boolean"
        },
        "usesAncestorConfig": {
          "description": "Output only.\nWhen true, the `Field`'s index configuration is set from the\nconfiguration specified by the `ancestor_field`.\nWhen false, the `Field`'s index configuration is defined explicitly.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2IndexConfigDelta": {
      "description": "Information about an index configuration change.",
      "id": "GoogleFirestoreAdminV1beta2IndexConfigDelta",
      "properties": {
        "changeType": {
          "description": "Specifies how the index is changing.",
          "enum": [
            "CHANGE_TYPE_UNSPECIFIED",
            "ADD",
            "REMOVE"
          ],
          "enumDescriptions": [
            "The type of change is not specified or known.",
            "The single field index is being added.",
            "The single field index is being removed."
          ],
          "type": "string"
        },
        "index": {
          "$ref": "GoogleFirestoreAdminV1beta2Index",
          "description": "The index being changed."
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2IndexField": {
      "description": "A field in an index.\nThe field_path describes which field is indexed, the value_mode describes\nhow the field value is indexed.",
      "id": "GoogleFirestoreAdminV1beta2IndexField",
      "properties": {
        "arrayConfig": {
          "description": "Indicates that this field supports operations on `array_value`s.",
          "enum": [
            "ARRAY_CONFIG_UNSPECIFIED",
            "CONTAINS"
          ],
          "enumDescriptions": [
            "The index does not support additional array queries.",
            "The index supports array containment queries."
          ],
          "type": "string"
        },
        "fieldPath": {
          "description": "Can be __name__.\nFor single field indexes, this must match the name of the field or may\nbe omitted.",
          "type": "string"
        },
        "order": {
          "description": "Indicates that this field supports ordering by the specified order or\ncomparing using =, \u003c, \u003c=, \u003e, \u003e=.",
          "enum": [
            "ORDER_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "The ordering is unspecified. Not a valid option.",
            "The field is ordered by ascending field value.",
            "The field is ordered by descending field value."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2IndexOperationMetadata": {
      "description": "Metadata for google.longrunning.Operation results from\nFirestoreAdmin.CreateIndex.",
      "id": "GoogleFirestoreAdminV1beta2IndexOperationMetadata",
      "properties": {
        "endTime": {
          "description": "The time this operation completed. Will be unset if operation still in\nprogress.",
          "format": "google-datetime",
          "type": "string"
        },
        "index": {
          "description": "The index resource that this operation is acting on. For example:\n`projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in bytes, of this operation."
        },
        "progressDocuments": {
          "$ref": "GoogleFirestoreAdminV1beta2Progress",
          "description": "The progress, in documents, of this operation."
        },
        "startTime": {
          "description": "The time this operation started.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "The state of the operation.",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ListFieldsResponse": {
      "description": "The response for FirestoreAdmin.ListFields.",
      "id": "GoogleFirestoreAdminV1beta2ListFieldsResponse",
      "properties": {
        "fields": {
          "description": "The requested fields.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2Field"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A page token that may be used to request another page of results. If blank,\nthis is the last page.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2ListIndexesResponse": {
      "description": "The response for FirestoreAdmin.ListIndexes.",
      "id": "GoogleFirestoreAdminV1beta2ListIndexesResponse",
      "properties": {
        "indexes": {
          "description": "The requested indexes.",
          "items": {
            "$ref": "GoogleFirestoreAdminV1beta2Index"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "A page token that may be used to request another page of results. If blank,\nthis is the last page.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleFirestoreAdminV1beta2Progress": {
      "description": "Describes the progress of the operation.\nUnit of work is generic and must be interpreted based on where Progress\nis used.",
      "id": "GoogleFirestoreAdminV1beta2Progress",
      "properties": {
        "completedWork": {
          "description": "The amount of work completed.",
          "format": "int64",
          "type": "string"
        },
        "estimatedWork": {
          "description": "The amount of work estimated.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleLongrunningOperation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "id": "GoogleLongrunningOperation",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error\nmessage, and error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "id": "Status",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "title": "Cloud Firestore API",
  "version": "v1beta2",
  "version_module": true
}