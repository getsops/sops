{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://datastore.googleapis.com/",
  "batchPath": "batch",
  "description": "Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.\n",
  "discoveryVersion": "v1",
  "documentationLink": "https://cloud.google.com/datastore/",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "datastore:v1",
  "kind": "discovery#restDescription",
  "name": "datastore",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "projects": {
      "methods": {
        "allocateIds": {
          "description": "Allocates IDs for the given keys, which is useful for referencing an entity\nbefore it is inserted.",
          "flatPath": "v1/projects/{projectId}:allocateIds",
          "httpMethod": "POST",
          "id": "datastore.projects.allocateIds",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:allocateIds",
          "request": {
            "$ref": "AllocateIdsRequest"
          },
          "response": {
            "$ref": "AllocateIdsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "beginTransaction": {
          "description": "Begins a new transaction.",
          "flatPath": "v1/projects/{projectId}:beginTransaction",
          "httpMethod": "POST",
          "id": "datastore.projects.beginTransaction",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:beginTransaction",
          "request": {
            "$ref": "BeginTransactionRequest"
          },
          "response": {
            "$ref": "BeginTransactionResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "commit": {
          "description": "Commits a transaction, optionally creating, deleting or modifying some\nentities.",
          "flatPath": "v1/projects/{projectId}:commit",
          "httpMethod": "POST",
          "id": "datastore.projects.commit",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:commit",
          "request": {
            "$ref": "CommitRequest"
          },
          "response": {
            "$ref": "CommitResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "export": {
          "description": "Exports a copy of all or a subset of entities from Google Cloud Datastore\nto another storage system, such as Google Cloud Storage. Recent updates to\nentities may not be reflected in the export. The export occurs in the\nbackground and its progress can be monitored and managed via the\nOperation resource that is created. The output of an export may only be\nused once the associated operation is done. If an export operation is\ncancelled before completion it may leave partial data behind in Google\nCloud Storage.",
          "flatPath": "v1/projects/{projectId}:export",
          "httpMethod": "POST",
          "id": "datastore.projects.export",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "Project ID against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:export",
          "request": {
            "$ref": "GoogleDatastoreAdminV1ExportEntitiesRequest"
          },
          "response": {
            "$ref": "GoogleLongrunningOperation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "import": {
          "description": "Imports entities into Google Cloud Datastore. Existing entities with the\nsame key are overwritten. The import occurs in the background and its\nprogress can be monitored and managed via the Operation resource that is\ncreated. If an ImportEntities operation is cancelled, it is possible\nthat a subset of the data has already been imported to Cloud Datastore.",
          "flatPath": "v1/projects/{projectId}:import",
          "httpMethod": "POST",
          "id": "datastore.projects.import",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "Project ID against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:import",
          "request": {
            "$ref": "GoogleDatastoreAdminV1ImportEntitiesRequest"
          },
          "response": {
            "$ref": "GoogleLongrunningOperation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "lookup": {
          "description": "Looks up entities by key.",
          "flatPath": "v1/projects/{projectId}:lookup",
          "httpMethod": "POST",
          "id": "datastore.projects.lookup",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:lookup",
          "request": {
            "$ref": "LookupRequest"
          },
          "response": {
            "$ref": "LookupResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "reserveIds": {
          "description": "Prevents the supplied keys' IDs from being auto-allocated by Cloud\nDatastore.",
          "flatPath": "v1/projects/{projectId}:reserveIds",
          "httpMethod": "POST",
          "id": "datastore.projects.reserveIds",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:reserveIds",
          "request": {
            "$ref": "ReserveIdsRequest"
          },
          "response": {
            "$ref": "ReserveIdsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "rollback": {
          "description": "Rolls back a transaction.",
          "flatPath": "v1/projects/{projectId}:rollback",
          "httpMethod": "POST",
          "id": "datastore.projects.rollback",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:rollback",
          "request": {
            "$ref": "RollbackRequest"
          },
          "response": {
            "$ref": "RollbackResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "runQuery": {
          "description": "Queries for entities.",
          "flatPath": "v1/projects/{projectId}:runQuery",
          "httpMethod": "POST",
          "id": "datastore.projects.runQuery",
          "parameterOrder": [
            "projectId"
          ],
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "v1/projects/{projectId}:runQuery",
          "request": {
            "$ref": "RunQueryRequest"
          },
          "response": {
            "$ref": "RunQueryResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        }
      },
      "resources": {
        "indexes": {
          "methods": {
            "get": {
              "description": "Gets an index.",
              "flatPath": "v1/projects/{projectId}/indexes/{indexId}",
              "httpMethod": "GET",
              "id": "datastore.projects.indexes.get",
              "parameterOrder": [
                "projectId",
                "indexId"
              ],
              "parameters": {
                "indexId": {
                  "description": "The resource ID of the index to get.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "projectId": {
                  "description": "Project ID against which to make the request.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/projects/{projectId}/indexes/{indexId}",
              "response": {
                "$ref": "GoogleDatastoreAdminV1Index"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "list": {
              "description": "Lists the indexes that match the specified filters.  Datastore uses an\neventually consistent query to fetch the list of indexes and may\noccasionally return stale results.",
              "flatPath": "v1/projects/{projectId}/indexes",
              "httpMethod": "GET",
              "id": "datastore.projects.indexes.list",
              "parameterOrder": [
                "projectId"
              ],
              "parameters": {
                "filter": {
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of items to return.  If zero, then all results will be\nreturned.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous List request, if any.",
                  "location": "query",
                  "type": "string"
                },
                "projectId": {
                  "description": "Project ID against which to make the request.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/projects/{projectId}/indexes",
              "response": {
                "$ref": "GoogleDatastoreAdminV1ListIndexesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            }
          }
        },
        "operations": {
          "methods": {
            "cancel": {
              "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan Operation.error value with a google.rpc.Status.code of 1,\ncorresponding to `Code.CANCELLED`.",
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}:cancel",
              "httpMethod": "POST",
              "id": "datastore.projects.operations.cancel",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the operation resource to be cancelled.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+name}:cancel",
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "delete": {
              "description": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
              "httpMethod": "DELETE",
              "id": "datastore.projects.operations.delete",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the operation resource to be deleted.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "get": {
              "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
              "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
              "httpMethod": "GET",
              "id": "datastore.projects.operations.get",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The name of the operation resource.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1/{+name}",
              "response": {
                "$ref": "GoogleLongrunningOperation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "list": {
              "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
              "flatPath": "v1/projects/{projectsId}/operations",
              "httpMethod": "GET",
              "id": "datastore.projects.operations.list",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "filter": {
                  "description": "The standard list filter.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the operation's parent resource.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "v1/{+name}/operations",
              "response": {
                "$ref": "GoogleLongrunningListOperationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            }
          }
        }
      }
    }
  },
  "revision": "20190421",
  "rootUrl": "https://datastore.googleapis.com/",
  "schemas": {
    "AllocateIdsRequest": {
      "description": "The request for Datastore.AllocateIds.",
      "id": "AllocateIdsRequest",
      "properties": {
        "keys": {
          "description": "A list of keys with incomplete key paths for which to allocate IDs.\nNo key may be reserved/read-only.",
          "items": {
            "$ref": "Key"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AllocateIdsResponse": {
      "description": "The response for Datastore.AllocateIds.",
      "id": "AllocateIdsResponse",
      "properties": {
        "keys": {
          "description": "The keys specified in the request (in the same order), each with\nits key path completed with a newly allocated ID.",
          "items": {
            "$ref": "Key"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ArrayValue": {
      "description": "An array value.",
      "id": "ArrayValue",
      "properties": {
        "values": {
          "description": "Values in the array.\nThe order of values in an array is preserved as long as all values have\nidentical settings for 'exclude_from_indexes'.",
          "items": {
            "$ref": "Value"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BeginTransactionRequest": {
      "description": "The request for Datastore.BeginTransaction.",
      "id": "BeginTransactionRequest",
      "properties": {
        "transactionOptions": {
          "$ref": "TransactionOptions",
          "description": "Options for a new transaction."
        }
      },
      "type": "object"
    },
    "BeginTransactionResponse": {
      "description": "The response for Datastore.BeginTransaction.",
      "id": "BeginTransactionResponse",
      "properties": {
        "transaction": {
          "description": "The transaction identifier (always present).",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitRequest": {
      "description": "The request for Datastore.Commit.",
      "id": "CommitRequest",
      "properties": {
        "mode": {
          "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
          "enum": [
            "MODE_UNSPECIFIED",
            "TRANSACTIONAL",
            "NON_TRANSACTIONAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Transactional: The mutations are either all applied, or none are applied.\nLearn about transactions\n[here](https://cloud.google.com/datastore/docs/concepts/transactions).",
            "Non-transactional: The mutations may not apply as all or none."
          ],
          "type": "string"
        },
        "mutations": {
          "description": "The mutations to perform.\n\nWhen mode is `TRANSACTIONAL`, mutations affecting a single entity are\napplied in order. The following sequences of mutations affecting a single\nentity are not permitted in a single `Commit` request:\n\n- `insert` followed by `insert`\n- `update` followed by `insert`\n- `upsert` followed by `insert`\n- `delete` followed by `update`\n\nWhen mode is `NON_TRANSACTIONAL`, no two mutations may affect a single\nentity.",
          "items": {
            "$ref": "Mutation"
          },
          "type": "array"
        },
        "transaction": {
          "description": "The identifier of the transaction associated with the commit. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommitResponse": {
      "description": "The response for Datastore.Commit.",
      "id": "CommitResponse",
      "properties": {
        "indexUpdates": {
          "description": "The number of index entries updated during the commit, or zero if none were\nupdated.",
          "format": "int32",
          "type": "integer"
        },
        "mutationResults": {
          "description": "The result of performing the mutations.\nThe i-th mutation result corresponds to the i-th mutation in the request.",
          "items": {
            "$ref": "MutationResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CompositeFilter": {
      "description": "A filter that merges multiple other filters using the given operator.",
      "id": "CompositeFilter",
      "properties": {
        "filters": {
          "description": "The list of filters to combine.\nMust contain at least one filter.",
          "items": {
            "$ref": "Filter"
          },
          "type": "array"
        },
        "op": {
          "description": "The operator for combining multiple filters.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The results are required to satisfy each of the combined filters."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty",
      "properties": {},
      "type": "object"
    },
    "Entity": {
      "description": "A Datastore data object.\n\nAn entity is limited to 1 megabyte when stored. That _roughly_\ncorresponds to a limit of 1 megabyte for the serialized form of this\nmessage.",
      "id": "Entity",
      "properties": {
        "key": {
          "$ref": "Key",
          "description": "The entity's key.\n\nAn entity must have a key, unless otherwise documented (for example,\nan entity in `Value.entity_value` may have no key).\nAn entity's kind is its key path's last element's kind,\nor null if it has no key."
        },
        "properties": {
          "additionalProperties": {
            "$ref": "Value"
          },
          "description": "The entity's properties.\nThe map's keys are property names.\nA property name matching regex `__.*__` is reserved.\nA reserved property name is forbidden in certain documented contexts.\nThe name must not contain more than 500 characters.\nThe name cannot be `\"\"`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "EntityResult": {
      "description": "The result of fetching an entity from Datastore.",
      "id": "EntityResult",
      "properties": {
        "cursor": {
          "description": "A cursor that points to the position after the result entity.\nSet only when the `EntityResult` is part of a `QueryResultBatch` message.",
          "format": "byte",
          "type": "string"
        },
        "entity": {
          "$ref": "Entity",
          "description": "The resulting entity."
        },
        "version": {
          "description": "The version of the entity, a strictly positive number that monotonically\nincreases with changes to the entity.\n\nThis field is set for `FULL` entity\nresults.\n\nFor missing entities in `LookupResponse`, this\nis the version of the snapshot that was used to look up the entity, and it\nis always set except for eventually consistent reads.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Filter": {
      "description": "A holder for any type of filter.",
      "id": "Filter",
      "properties": {
        "compositeFilter": {
          "$ref": "CompositeFilter",
          "description": "A composite filter."
        },
        "propertyFilter": {
          "$ref": "PropertyFilter",
          "description": "A filter on a property."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1CommonMetadata": {
      "description": "Metadata common to all Datastore Admin operations.",
      "id": "GoogleDatastoreAdminV1CommonMetadata",
      "properties": {
        "endTime": {
          "description": "The time the operation ended, either successfully or otherwise.",
          "format": "google-datetime",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The client-assigned labels which were provided when the operation was\ncreated. May also include additional labels.",
          "type": "object"
        },
        "operationType": {
          "description": "The type of the operation. Can be used as a filter in\nListOperationsRequest.",
          "enum": [
            "OPERATION_TYPE_UNSPECIFIED",
            "EXPORT_ENTITIES",
            "IMPORT_ENTITIES",
            "CREATE_INDEX",
            "DELETE_INDEX"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "ExportEntities.",
            "ImportEntities.",
            "CreateIndex.",
            "DeleteIndex."
          ],
          "type": "string"
        },
        "startTime": {
          "description": "The time that work began on the operation.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "The current state of the Operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1EntityFilter": {
      "description": "Identifies a subset of entities in a project. This is specified as\ncombinations of kinds and namespaces (either or both of which may be all, as\ndescribed in the following examples).\nExample usage:\n\nEntire project:\n  kinds=[], namespace_ids=[]\n\nKinds Foo and Bar in all namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=[]\n\nKinds Foo and Bar only in the default namespace:\n  kinds=['Foo', 'Bar'], namespace_ids=['']\n\nKinds Foo and Bar in both the default and Baz namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']\n\nThe entire Baz namespace:\n  kinds=[], namespace_ids=['Baz']",
      "id": "GoogleDatastoreAdminV1EntityFilter",
      "properties": {
        "kinds": {
          "description": "If empty, then this represents all kinds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "namespaceIds": {
          "description": "An empty list represents all namespaces. This is the preferred\nusage for projects that don't use namespaces.\n\nAn empty string element represents the default namespace. This should be\nused if the project has data in non-default namespaces, but doesn't want to\ninclude them.\nEach namespace in this list must be unique.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1ExportEntitiesMetadata": {
      "description": "Metadata for ExportEntities operations.",
      "id": "GoogleDatastoreAdminV1ExportEntitiesMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of which entities are being exported."
        },
        "outputUrlPrefix": {
          "description": "Location for the export metadata and data files. This will be the same\nvalue as the\ngoogle.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix\nfield. The final output location is provided in\ngoogle.datastore.admin.v1.ExportEntitiesResponse.output_url.",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1ExportEntitiesRequest": {
      "description": "The request for\ngoogle.datastore.admin.v1.DatastoreAdmin.ExportEntities.",
      "id": "GoogleDatastoreAdminV1ExportEntitiesRequest",
      "properties": {
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of what data from the project is included in the export."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Client-assigned labels.",
          "type": "object"
        },
        "outputUrlPrefix": {
          "description": "Location for the export metadata and data files.\n\nThe full resource URL of the external storage location. Currently, only\nGoogle Cloud Storage is supported. So output_url_prefix should be of the\nform: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the\nname of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud\nStorage namespace path (this is not a Cloud Datastore namespace). For more\ninformation about Cloud Storage namespace paths, see\n[Object name\nconsiderations](https://cloud.google.com/storage/docs/naming#object-considerations).\n\nThe resulting files will be nested deeper than the specified URL prefix.\nThe final output URL will be provided in the\ngoogle.datastore.admin.v1.ExportEntitiesResponse.output_url field. That\nvalue should be used for subsequent ImportEntities operations.\n\nBy nesting the data files deeper, the same Cloud Storage bucket can be used\nin multiple ExportEntities operations without conflict.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1ExportEntitiesResponse": {
      "description": "The response for\ngoogle.datastore.admin.v1.DatastoreAdmin.ExportEntities.",
      "id": "GoogleDatastoreAdminV1ExportEntitiesResponse",
      "properties": {
        "outputUrl": {
          "description": "Location of the output metadata file. This can be used to begin an import\ninto Cloud Datastore (this project or another project). See\ngoogle.datastore.admin.v1.ImportEntitiesRequest.input_url.\nOnly present if the operation completed successfully.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1ImportEntitiesMetadata": {
      "description": "Metadata for ImportEntities operations.",
      "id": "GoogleDatastoreAdminV1ImportEntitiesMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Description of which entities are being imported."
        },
        "inputUrl": {
          "description": "The location of the import metadata file. This will be the same value as\nthe google.datastore.admin.v1.ExportEntitiesResponse.output_url field.",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1ImportEntitiesRequest": {
      "description": "The request for\ngoogle.datastore.admin.v1.DatastoreAdmin.ImportEntities.",
      "id": "GoogleDatastoreAdminV1ImportEntitiesRequest",
      "properties": {
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1EntityFilter",
          "description": "Optionally specify which kinds/namespaces are to be imported. If provided,\nthe list must be a subset of the EntityFilter used in creating the export,\notherwise a FAILED_PRECONDITION error will be returned. If no filter is\nspecified then all entities from the export are imported."
        },
        "inputUrl": {
          "description": "The full resource URL of the external storage location. Currently, only\nGoogle Cloud Storage is supported. So input_url should be of the form:\n`gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where\n`BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is\nan optional Cloud Storage namespace path (this is not a Cloud Datastore\nnamespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written\nby the ExportEntities operation. For more information about Cloud Storage\nnamespace paths, see\n[Object name\nconsiderations](https://cloud.google.com/storage/docs/naming#object-considerations).\n\nFor more information, see\ngoogle.datastore.admin.v1.ExportEntitiesResponse.output_url.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Client-assigned labels.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1Index": {
      "description": "A minimal index definition.",
      "id": "GoogleDatastoreAdminV1Index",
      "properties": {
        "ancestor": {
          "description": "The index's ancestor mode.  Must not be ANCESTOR_MODE_UNSPECIFIED.\nRequired.",
          "enum": [
            "ANCESTOR_MODE_UNSPECIFIED",
            "NONE",
            "ALL_ANCESTORS"
          ],
          "enumDescriptions": [
            "The ancestor mode is unspecified.",
            "Do not include the entity's ancestors in the index.",
            "Include all the entity's ancestors in the index."
          ],
          "type": "string"
        },
        "indexId": {
          "description": "The resource ID of the index.\nOutput only.",
          "type": "string"
        },
        "kind": {
          "description": "The entity kind to which this index applies.\nRequired.",
          "type": "string"
        },
        "projectId": {
          "description": "Project ID.\nOutput only.",
          "type": "string"
        },
        "properties": {
          "description": "An ordered sequence of property names and their index attributes.\nRequired.",
          "items": {
            "$ref": "GoogleDatastoreAdminV1IndexedProperty"
          },
          "type": "array"
        },
        "state": {
          "description": "The state of the index.\nOutput only.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "ERROR"
          ],
          "enumDescriptions": [
            "The state is unspecified.",
            "The index is being created, and cannot be used by queries.\nThere is an active long-running operation for the index.\nThe index is updated when writing an entity.\nSome index data may exist.",
            "The index is ready to be used.\nThe index is updated when writing an entity.\nThe index is fully populated from all stored entities it applies to.",
            "The index is being deleted, and cannot be used by queries.\nThere is an active long-running operation for the index.\nThe index is not updated when writing an entity.\nSome index data may exist.",
            "The index was being created or deleted, but something went wrong.\nThe index cannot by used by queries.\nThere is no active long-running operation for the index,\nand the most recently finished long-running operation failed.\nThe index is not updated when writing an entity.\nSome index data may exist."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1IndexOperationMetadata": {
      "description": "Metadata for Index operations.",
      "id": "GoogleDatastoreAdminV1IndexOperationMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "indexId": {
          "description": "The index resource ID that this operation is acting on.",
          "type": "string"
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1IndexedProperty": {
      "description": "A property of an index.",
      "id": "GoogleDatastoreAdminV1IndexedProperty",
      "properties": {
        "direction": {
          "description": "The indexed property's direction.  Must not be DIRECTION_UNSPECIFIED.\nRequired.",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "The direction is unspecified.",
            "The property's values are indexed so as to support sequencing in\nascending order and also query by \u003c, \u003e, \u003c=, \u003e=, and =.",
            "The property's values are indexed so as to support sequencing in\ndescending order and also query by \u003c, \u003e, \u003c=, \u003e=, and =."
          ],
          "type": "string"
        },
        "name": {
          "description": "The property name to index.\nRequired.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1ListIndexesResponse": {
      "description": "The response for\ngoogle.datastore.admin.v1.DatastoreAdmin.ListIndexes.",
      "id": "GoogleDatastoreAdminV1ListIndexesResponse",
      "properties": {
        "indexes": {
          "description": "The indexes.",
          "items": {
            "$ref": "GoogleDatastoreAdminV1Index"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1Progress": {
      "description": "Measures the progress of a particular metric.",
      "id": "GoogleDatastoreAdminV1Progress",
      "properties": {
        "workCompleted": {
          "description": "The amount of work that has been completed. Note that this may be greater\nthan work_estimated.",
          "format": "int64",
          "type": "string"
        },
        "workEstimated": {
          "description": "An estimate of how much work needs to be performed. May be zero if the\nwork estimate is unavailable.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1CommonMetadata": {
      "description": "Metadata common to all Datastore Admin operations.",
      "id": "GoogleDatastoreAdminV1beta1CommonMetadata",
      "properties": {
        "endTime": {
          "description": "The time the operation ended, either successfully or otherwise.",
          "format": "google-datetime",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The client-assigned labels which were provided when the operation was\ncreated. May also include additional labels.",
          "type": "object"
        },
        "operationType": {
          "description": "The type of the operation. Can be used as a filter in\nListOperationsRequest.",
          "enum": [
            "OPERATION_TYPE_UNSPECIFIED",
            "EXPORT_ENTITIES",
            "IMPORT_ENTITIES"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "ExportEntities.",
            "ImportEntities."
          ],
          "type": "string"
        },
        "startTime": {
          "description": "The time that work began on the operation.",
          "format": "google-datetime",
          "type": "string"
        },
        "state": {
          "description": "The current state of the Operation.",
          "enum": [
            "STATE_UNSPECIFIED",
            "INITIALIZING",
            "PROCESSING",
            "CANCELLING",
            "FINALIZING",
            "SUCCESSFUL",
            "FAILED",
            "CANCELLED"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Request is being prepared for processing.",
            "Request is actively being processed.",
            "Request is in the process of being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation on the operation.",
            "Request has been processed and is in its finalization stage.",
            "Request has completed successfully.",
            "Request has finished being processed, but encountered an error.",
            "Request has finished being cancelled after user called\ngoogle.longrunning.Operations.CancelOperation."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1EntityFilter": {
      "description": "Identifies a subset of entities in a project. This is specified as\ncombinations of kinds and namespaces (either or both of which may be all, as\ndescribed in the following examples).\nExample usage:\n\nEntire project:\n  kinds=[], namespace_ids=[]\n\nKinds Foo and Bar in all namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=[]\n\nKinds Foo and Bar only in the default namespace:\n  kinds=['Foo', 'Bar'], namespace_ids=['']\n\nKinds Foo and Bar in both the default and Baz namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']\n\nThe entire Baz namespace:\n  kinds=[], namespace_ids=['Baz']",
      "id": "GoogleDatastoreAdminV1beta1EntityFilter",
      "properties": {
        "kinds": {
          "description": "If empty, then this represents all kinds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "namespaceIds": {
          "description": "An empty list represents all namespaces. This is the preferred\nusage for projects that don't use namespaces.\n\nAn empty string element represents the default namespace. This should be\nused if the project has data in non-default namespaces, but doesn't want to\ninclude them.\nEach namespace in this list must be unique.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata": {
      "description": "Metadata for ExportEntities operations.",
      "id": "GoogleDatastoreAdminV1beta1ExportEntitiesMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1beta1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1beta1EntityFilter",
          "description": "Description of which entities are being exported."
        },
        "outputUrlPrefix": {
          "description": "Location for the export metadata and data files. This will be the same\nvalue as the\ngoogle.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix\nfield. The final output location is provided in\ngoogle.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1ExportEntitiesResponse": {
      "description": "The response for\ngoogle.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.",
      "id": "GoogleDatastoreAdminV1beta1ExportEntitiesResponse",
      "properties": {
        "outputUrl": {
          "description": "Location of the output metadata file. This can be used to begin an import\ninto Cloud Datastore (this project or another project). See\ngoogle.datastore.admin.v1beta1.ImportEntitiesRequest.input_url.\nOnly present if the operation completed successfully.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata": {
      "description": "Metadata for ImportEntities operations.",
      "id": "GoogleDatastoreAdminV1beta1ImportEntitiesMetadata",
      "properties": {
        "common": {
          "$ref": "GoogleDatastoreAdminV1beta1CommonMetadata",
          "description": "Metadata common to all Datastore Admin operations."
        },
        "entityFilter": {
          "$ref": "GoogleDatastoreAdminV1beta1EntityFilter",
          "description": "Description of which entities are being imported."
        },
        "inputUrl": {
          "description": "The location of the import metadata file. This will be the same value as\nthe google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url\nfield.",
          "type": "string"
        },
        "progressBytes": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of bytes processed."
        },
        "progressEntities": {
          "$ref": "GoogleDatastoreAdminV1beta1Progress",
          "description": "An estimate of the number of entities processed."
        }
      },
      "type": "object"
    },
    "GoogleDatastoreAdminV1beta1Progress": {
      "description": "Measures the progress of a particular metric.",
      "id": "GoogleDatastoreAdminV1beta1Progress",
      "properties": {
        "workCompleted": {
          "description": "The amount of work that has been completed. Note that this may be greater\nthan work_estimated.",
          "format": "int64",
          "type": "string"
        },
        "workEstimated": {
          "description": "An estimate of how much work needs to be performed. May be zero if the\nwork estimate is unavailable.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleLongrunningListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "GoogleLongrunningListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "GoogleLongrunningOperation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleLongrunningOperation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "id": "GoogleLongrunningOperation",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "GqlQuery": {
      "description": "A [GQL\nquery](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
      "id": "GqlQuery",
      "properties": {
        "allowLiterals": {
          "description": "When false, the query string must not contain any literals and instead must\nbind all values. For example,\n`SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while\n`SELECT * FROM Kind WHERE a = @value` is.",
          "type": "boolean"
        },
        "namedBindings": {
          "additionalProperties": {
            "$ref": "GqlQueryParameter"
          },
          "description": "For each non-reserved named binding site in the query string, there must be\na named parameter with that name, but not necessarily the inverse.\n\nKey must match regex `A-Za-z_$*`, must not match regex\n`__.*__`, and must not be `\"\"`.",
          "type": "object"
        },
        "positionalBindings": {
          "description": "Numbered binding site @1 references the first numbered parameter,\neffectively using 1-based indexing, rather than the usual 0.\n\nFor each binding site numbered i in `query_string`, there must be an i-th\nnumbered parameter. The inverse must also be true.",
          "items": {
            "$ref": "GqlQueryParameter"
          },
          "type": "array"
        },
        "queryString": {
          "description": "A string of the format described\n[here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GqlQueryParameter": {
      "description": "A binding parameter for a GQL query.",
      "id": "GqlQueryParameter",
      "properties": {
        "cursor": {
          "description": "A query cursor. Query cursors are returned in query\nresult batches.",
          "format": "byte",
          "type": "string"
        },
        "value": {
          "$ref": "Value",
          "description": "A value parameter."
        }
      },
      "type": "object"
    },
    "Key": {
      "description": "A unique identifier for an entity.\nIf a key's partition ID or any of its path kinds or names are\nreserved/read-only, the key is reserved/read-only.\nA reserved/read-only key is forbidden in certain documented contexts.",
      "id": "Key",
      "properties": {
        "partitionId": {
          "$ref": "PartitionId",
          "description": "Entities are partitioned into subsets, currently identified by a project\nID and namespace ID.\nQueries are scoped to a single partition."
        },
        "path": {
          "description": "The entity path.\nAn entity path consists of one or more elements composed of a kind and a\nstring or numerical identifier, which identify entities. The first\nelement identifies a _root entity_, the second element identifies\na _child_ of the root entity, the third element identifies a child of the\nsecond entity, and so forth. The entities identified by all prefixes of\nthe path are called the element's _ancestors_.\n\nAn entity path is always fully complete: *all* of the entity's ancestors\nare required to be in the path along with the entity identifier itself.\nThe only exception is that in some documented cases, the identifier in the\nlast path element (for the entity) itself may be omitted. For example,\nthe last path element of the key of `Mutation.insert` may have no\nidentifier.\n\nA path can never be empty, and a path can have at most 100 elements.",
          "items": {
            "$ref": "PathElement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "KindExpression": {
      "description": "A representation of a kind.",
      "id": "KindExpression",
      "properties": {
        "name": {
          "description": "The name of the kind.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LatLng": {
      "description": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n\u003ca href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\"\u003eWGS84\nstandard\u003c/a\u003e. Values must be within normalized ranges.",
      "id": "LatLng",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "LookupRequest": {
      "description": "The request for Datastore.Lookup.",
      "id": "LookupRequest",
      "properties": {
        "keys": {
          "description": "Keys of entities to look up.",
          "items": {
            "$ref": "Key"
          },
          "type": "array"
        },
        "readOptions": {
          "$ref": "ReadOptions",
          "description": "The options for this lookup request."
        }
      },
      "type": "object"
    },
    "LookupResponse": {
      "description": "The response for Datastore.Lookup.",
      "id": "LookupResponse",
      "properties": {
        "deferred": {
          "description": "A list of keys that were not looked up due to resource constraints. The\norder of results in this field is undefined and has no relation to the\norder of the keys in the input.",
          "items": {
            "$ref": "Key"
          },
          "type": "array"
        },
        "found": {
          "description": "Entities found as `ResultType.FULL` entities. The order of results in this\nfield is undefined and has no relation to the order of the keys in the\ninput.",
          "items": {
            "$ref": "EntityResult"
          },
          "type": "array"
        },
        "missing": {
          "description": "Entities not found as `ResultType.KEY_ONLY` entities. The order of results\nin this field is undefined and has no relation to the order of the keys\nin the input.",
          "items": {
            "$ref": "EntityResult"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Mutation": {
      "description": "A mutation to apply to an entity.",
      "id": "Mutation",
      "properties": {
        "baseVersion": {
          "description": "The version of the entity that this mutation is being applied to. If this\ndoes not match the current version on the server, the mutation conflicts.",
          "format": "int64",
          "type": "string"
        },
        "delete": {
          "$ref": "Key",
          "description": "The key of the entity to delete. The entity may or may not already exist.\nMust have a complete key path and must not be reserved/read-only."
        },
        "insert": {
          "$ref": "Entity",
          "description": "The entity to insert. The entity must not already exist.\nThe entity key's final path element may be incomplete."
        },
        "update": {
          "$ref": "Entity",
          "description": "The entity to update. The entity must already exist.\nMust have a complete key path."
        },
        "upsert": {
          "$ref": "Entity",
          "description": "The entity to upsert. The entity may or may not already exist.\nThe entity key's final path element may be incomplete."
        }
      },
      "type": "object"
    },
    "MutationResult": {
      "description": "The result of applying a mutation.",
      "id": "MutationResult",
      "properties": {
        "conflictDetected": {
          "description": "Whether a conflict was detected for this mutation. Always false when a\nconflict detection strategy field is not set in the mutation.",
          "type": "boolean"
        },
        "key": {
          "$ref": "Key",
          "description": "The automatically allocated key.\nSet only when the mutation allocated a key."
        },
        "version": {
          "description": "The version of the entity on the server after processing the mutation. If\nthe mutation doesn't change anything on the server, then the version will\nbe the version of the current entity or, if no entity is present, a version\nthat is strictly greater than the version of any previous entity and less\nthan the version of any possible future entity.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PartitionId": {
      "description": "A partition ID identifies a grouping of entities. The grouping is always\nby project and namespace, however the namespace ID may be empty.\n\nA partition ID contains several dimensions:\nproject ID and namespace ID.\n\nPartition dimensions:\n\n- May be `\"\"`.\n- Must be valid UTF-8 bytes.\n- Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}`\nIf the value of any dimension matches regex `__.*__`, the partition is\nreserved/read-only.\nA reserved/read-only partition ID is forbidden in certain documented\ncontexts.\n\nForeign partition IDs (in which the project ID does\nnot match the context project ID ) are discouraged.\nReads and writes of foreign partition IDs may fail if the project is not in an active state.",
      "id": "PartitionId",
      "properties": {
        "namespaceId": {
          "description": "If not empty, the ID of the namespace to which the entities belong.",
          "type": "string"
        },
        "projectId": {
          "description": "The ID of the project to which the entities belong.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PathElement": {
      "description": "A (kind, ID/name) pair used to construct a key path.\n\nIf either name or ID is set, the element is complete.\nIf neither is set, the element is incomplete.",
      "id": "PathElement",
      "properties": {
        "id": {
          "description": "The auto-allocated ID of the entity.\nNever equal to zero. Values less than zero are discouraged and may not\nbe supported in the future.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "description": "The kind of the entity.\nA kind matching regex `__.*__` is reserved/read-only.\nA kind must not contain more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity.\nA name matching regex `__.*__` is reserved/read-only.\nA name must not be more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Projection": {
      "description": "A representation of a property in a projection.",
      "id": "Projection",
      "properties": {
        "property": {
          "$ref": "PropertyReference",
          "description": "The property to project."
        }
      },
      "type": "object"
    },
    "PropertyFilter": {
      "description": "A filter on a specific property.",
      "id": "PropertyFilter",
      "properties": {
        "op": {
          "description": "The operator to filter by.",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "HAS_ANCESTOR"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Less than.",
            "Less than or equal.",
            "Greater than.",
            "Greater than or equal.",
            "Equal.",
            "Has ancestor."
          ],
          "type": "string"
        },
        "property": {
          "$ref": "PropertyReference",
          "description": "The property to filter by."
        },
        "value": {
          "$ref": "Value",
          "description": "The value to compare the property to."
        }
      },
      "type": "object"
    },
    "PropertyOrder": {
      "description": "The desired order for a specific property.",
      "id": "PropertyOrder",
      "properties": {
        "direction": {
          "description": "The direction to order by. Defaults to `ASCENDING`.",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Ascending.",
            "Descending."
          ],
          "type": "string"
        },
        "property": {
          "$ref": "PropertyReference",
          "description": "The property to order by."
        }
      },
      "type": "object"
    },
    "PropertyReference": {
      "description": "A reference to a property relative to the kind expressions.",
      "id": "PropertyReference",
      "properties": {
        "name": {
          "description": "The name of the property.\nIf name includes \".\"s, it may be interpreted as a property name path.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Query": {
      "description": "A query for entities.",
      "id": "Query",
      "properties": {
        "distinctOn": {
          "description": "The properties to make distinct. The query results will contain the first\nresult for each distinct combination of values for the given properties\n(if empty, all results are returned).",
          "items": {
            "$ref": "PropertyReference"
          },
          "type": "array"
        },
        "endCursor": {
          "description": "An ending point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to limit the same\nquery](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "format": "byte",
          "type": "string"
        },
        "filter": {
          "$ref": "Filter",
          "description": "The filter to apply."
        },
        "kind": {
          "description": "The kinds to query (if empty, returns entities of all kinds).\nCurrently at most 1 kind may be specified.",
          "items": {
            "$ref": "KindExpression"
          },
          "type": "array"
        },
        "limit": {
          "description": "The maximum number of results to return. Applies after all other\nconstraints. Optional.\nUnspecified is interpreted as no limit.\nMust be \u003e= 0 if specified.",
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "description": "The number of results to skip. Applies before limit, but after all other\nconstraints. Optional. Must be \u003e= 0 if specified.",
          "format": "int32",
          "type": "integer"
        },
        "order": {
          "description": "The order to apply to the query results (if empty, order is unspecified).",
          "items": {
            "$ref": "PropertyOrder"
          },
          "type": "array"
        },
        "projection": {
          "description": "The projection to return. Defaults to returning all properties.",
          "items": {
            "$ref": "Projection"
          },
          "type": "array"
        },
        "startCursor": {
          "description": "A starting point for the query results. Query cursors are\nreturned in query result batches and\n[can only be used to continue the same\nquery](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "QueryResultBatch": {
      "description": "A batch of results produced by a query.",
      "id": "QueryResultBatch",
      "properties": {
        "endCursor": {
          "description": "A cursor that points to the position after the last result in the batch.",
          "format": "byte",
          "type": "string"
        },
        "entityResultType": {
          "description": "The result type for every entity in `entity_results`.",
          "enum": [
            "RESULT_TYPE_UNSPECIFIED",
            "FULL",
            "PROJECTION",
            "KEY_ONLY"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "The key and properties.",
            "A projected subset of properties. The entity may have no key.",
            "Only the key."
          ],
          "type": "string"
        },
        "entityResults": {
          "description": "The results for this batch.",
          "items": {
            "$ref": "EntityResult"
          },
          "type": "array"
        },
        "moreResults": {
          "description": "The state of the query after the current batch.",
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ],
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end\ncursor.",
            "The query is finished, and there are no more results."
          ],
          "type": "string"
        },
        "skippedCursor": {
          "description": "A cursor that points to the position after the last skipped result.\nWill be set when `skipped_results` != 0.",
          "format": "byte",
          "type": "string"
        },
        "skippedResults": {
          "description": "The number of results skipped, typically because of an offset.",
          "format": "int32",
          "type": "integer"
        },
        "snapshotVersion": {
          "description": "The version number of the snapshot this batch was returned from.\nThis applies to the range of results from the query's `start_cursor` (or\nthe beginning of the query if no cursor was given) to this batch's\n`end_cursor` (not the query's `end_cursor`).\n\nIn a single transaction, subsequent query result batches for the same query\ncan have a greater snapshot version number. Each batch's snapshot version\nis valid for all preceding batches.\nThe value will be zero for eventually consistent queries.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReadOnly": {
      "description": "Options specific to read-only transactions.",
      "id": "ReadOnly",
      "properties": {},
      "type": "object"
    },
    "ReadOptions": {
      "description": "The options shared by read requests.",
      "id": "ReadOptions",
      "properties": {
        "readConsistency": {
          "description": "The non-transactional read consistency to use.\nCannot be set to `STRONG` for global queries.",
          "enum": [
            "READ_CONSISTENCY_UNSPECIFIED",
            "STRONG",
            "EVENTUAL"
          ],
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Strong consistency.",
            "Eventual consistency."
          ],
          "type": "string"
        },
        "transaction": {
          "description": "The identifier of the transaction in which to read. A\ntransaction identifier is returned by a call to\nDatastore.BeginTransaction.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReadWrite": {
      "description": "Options specific to read / write transactions.",
      "id": "ReadWrite",
      "properties": {
        "previousTransaction": {
          "description": "The transaction identifier of the transaction being retried.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReserveIdsRequest": {
      "description": "The request for Datastore.ReserveIds.",
      "id": "ReserveIdsRequest",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "keys": {
          "description": "A list of keys with complete key paths whose numeric IDs should not be\nauto-allocated.",
          "items": {
            "$ref": "Key"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReserveIdsResponse": {
      "description": "The response for Datastore.ReserveIds.",
      "id": "ReserveIdsResponse",
      "properties": {},
      "type": "object"
    },
    "RollbackRequest": {
      "description": "The request for Datastore.Rollback.",
      "id": "RollbackRequest",
      "properties": {
        "transaction": {
          "description": "The transaction identifier, returned by a call to\nDatastore.BeginTransaction.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RollbackResponse": {
      "description": "The response for Datastore.Rollback.\n(an empty message).",
      "id": "RollbackResponse",
      "properties": {},
      "type": "object"
    },
    "RunQueryRequest": {
      "description": "The request for Datastore.RunQuery.",
      "id": "RunQueryRequest",
      "properties": {
        "gqlQuery": {
          "$ref": "GqlQuery",
          "description": "The GQL query to run."
        },
        "partitionId": {
          "$ref": "PartitionId",
          "description": "Entities are partitioned into subsets, identified by a partition ID.\nQueries are scoped to a single partition.\nThis partition ID is normalized with the standard default context\npartition ID."
        },
        "query": {
          "$ref": "Query",
          "description": "The query to run."
        },
        "readOptions": {
          "$ref": "ReadOptions",
          "description": "The options for this query."
        }
      },
      "type": "object"
    },
    "RunQueryResponse": {
      "description": "The response for Datastore.RunQuery.",
      "id": "RunQueryResponse",
      "properties": {
        "batch": {
          "$ref": "QueryResultBatch",
          "description": "A batch of query results (always present)."
        },
        "query": {
          "$ref": "Query",
          "description": "The parsed form of the `GqlQuery` from the request, if it was set."
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error\nmessage, and error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "id": "Status",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TransactionOptions": {
      "description": "Options for beginning a new transaction.\n\nTransactions can be created explicitly with calls to\nDatastore.BeginTransaction or implicitly by setting\nReadOptions.new_transaction in read requests.",
      "id": "TransactionOptions",
      "properties": {
        "readOnly": {
          "$ref": "ReadOnly",
          "description": "The transaction should only allow reads."
        },
        "readWrite": {
          "$ref": "ReadWrite",
          "description": "The transaction should allow both reads and writes."
        }
      },
      "type": "object"
    },
    "Value": {
      "description": "A message that can hold any of the supported value types and associated\nmetadata.",
      "id": "Value",
      "properties": {
        "arrayValue": {
          "$ref": "ArrayValue",
          "description": "An array value.\nCannot contain another array value.\nA `Value` instance that sets field `array_value` must not set fields\n`meaning` or `exclude_from_indexes`."
        },
        "blobValue": {
          "description": "A blob value.\nMay have at most 1,000,000 bytes.\nWhen `exclude_from_indexes` is false, may have at most 1500 bytes.\nIn JSON requests, must be base64-encoded.",
          "format": "byte",
          "type": "string"
        },
        "booleanValue": {
          "description": "A boolean value.",
          "type": "boolean"
        },
        "doubleValue": {
          "description": "A double value.",
          "format": "double",
          "type": "number"
        },
        "entityValue": {
          "$ref": "Entity",
          "description": "An entity value.\n\n- May have no key.\n- May have a key with an incomplete key path.\n- May have a reserved/read-only key."
        },
        "excludeFromIndexes": {
          "description": "If the value should be excluded from all indexes including those defined\nexplicitly.",
          "type": "boolean"
        },
        "geoPointValue": {
          "$ref": "LatLng",
          "description": "A geo point value representing a point on the surface of Earth."
        },
        "integerValue": {
          "description": "An integer value.",
          "format": "int64",
          "type": "string"
        },
        "keyValue": {
          "$ref": "Key",
          "description": "A key value."
        },
        "meaning": {
          "description": "The `meaning` field should only be populated for backwards compatibility.",
          "format": "int32",
          "type": "integer"
        },
        "nullValue": {
          "description": "A null value.",
          "enum": [
            "NULL_VALUE"
          ],
          "enumDescriptions": [
            "Null value."
          ],
          "type": "string"
        },
        "stringValue": {
          "description": "A UTF-8 encoded string value.\nWhen `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.\nOtherwise, may be set to at least 1,000,000 bytes.",
          "type": "string"
        },
        "timestampValue": {
          "description": "A timestamp value.\nWhen stored in the Datastore, precise only to microseconds;\nany additional precision is rounded down.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "title": "Cloud Datastore API",
  "version": "v1",
  "version_module": true
}