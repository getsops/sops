// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v1/errors/setting_error.proto

package errors

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Enum describing possible setting errors.
type SettingErrorEnum_SettingError int32

const (
	// Enum unspecified.
	SettingErrorEnum_UNSPECIFIED SettingErrorEnum_SettingError = 0
	// The received error code is not known in this version.
	SettingErrorEnum_UNKNOWN SettingErrorEnum_SettingError = 1
	// The campaign setting is not available for this Google Ads account.
	SettingErrorEnum_SETTING_TYPE_IS_NOT_AVAILABLE SettingErrorEnum_SettingError = 3
	// The setting is not compatible with the campaign.
	SettingErrorEnum_SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN SettingErrorEnum_SettingError = 4
	// The supplied TargetingSetting contains an invalid CriterionTypeGroup. See
	// CriterionTypeGroup documentation for CriterionTypeGroups allowed
	// in Campaign or AdGroup TargetingSettings.
	SettingErrorEnum_TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP SettingErrorEnum_SettingError = 5
	// TargetingSetting must not explicitly
	// set any of the Demographic CriterionTypeGroups (AGE_RANGE, GENDER,
	// PARENT, INCOME_RANGE) to false (it's okay to not set them at all, in
	// which case the system will set them to true automatically).
	SettingErrorEnum_TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL SettingErrorEnum_SettingError = 6
	// TargetingSetting cannot change any of
	// the Demographic CriterionTypeGroups (AGE_RANGE, GENDER, PARENT,
	// INCOME_RANGE) from true to false.
	SettingErrorEnum_TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP SettingErrorEnum_SettingError = 7
	// At least one feed id should be present.
	SettingErrorEnum_DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT SettingErrorEnum_SettingError = 8
	// The supplied DynamicSearchAdsSetting contains an invalid domain name.
	SettingErrorEnum_DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME SettingErrorEnum_SettingError = 9
	// The supplied DynamicSearchAdsSetting contains a subdomain name.
	SettingErrorEnum_DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME SettingErrorEnum_SettingError = 10
	// The supplied DynamicSearchAdsSetting contains an invalid language code.
	SettingErrorEnum_DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE SettingErrorEnum_SettingError = 11
	// TargetingSettings in search campaigns should not have
	// CriterionTypeGroup.PLACEMENT set to targetAll.
	SettingErrorEnum_TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN SettingErrorEnum_SettingError = 12
	// Duplicate description in universal app setting description field.
	SettingErrorEnum_UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION SettingErrorEnum_SettingError = 13
	// Description line width is too long in universal app setting description
	// field.
	SettingErrorEnum_UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG SettingErrorEnum_SettingError = 14
	// Universal app setting appId field cannot be modified for COMPLETE
	// campaigns.
	SettingErrorEnum_UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED SettingErrorEnum_SettingError = 15
	// YoutubeVideoMediaIds in universal app setting cannot exceed size limit.
	SettingErrorEnum_TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN SettingErrorEnum_SettingError = 16
	// ImageMediaIds in universal app setting cannot exceed size limit.
	SettingErrorEnum_TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN SettingErrorEnum_SettingError = 17
	// Media is incompatible for universal app campaign.
	SettingErrorEnum_MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN SettingErrorEnum_SettingError = 18
	// Too many exclamation marks in universal app campaign ad text ideas.
	SettingErrorEnum_TOO_MANY_EXCLAMATION_MARKS SettingErrorEnum_SettingError = 19
)

var SettingErrorEnum_SettingError_name = map[int32]string{
	0:  "UNSPECIFIED",
	1:  "UNKNOWN",
	3:  "SETTING_TYPE_IS_NOT_AVAILABLE",
	4:  "SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN",
	5:  "TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP",
	6:  "TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL",
	7:  "TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP",
	8:  "DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT",
	9:  "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME",
	10: "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME",
	11: "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE",
	12: "TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN",
	13: "UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION",
	14: "UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG",
	15: "UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED",
	16: "TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN",
	17: "TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN",
	18: "MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN",
	19: "TOO_MANY_EXCLAMATION_MARKS",
}

var SettingErrorEnum_SettingError_value = map[string]int32{
	"UNSPECIFIED":                   0,
	"UNKNOWN":                       1,
	"SETTING_TYPE_IS_NOT_AVAILABLE": 3,
	"SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN":                                             4,
	"TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP":                                  5,
	"TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL":            6,
	"TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP": 7,
	"DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT":                          8,
	"DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME":                                  9,
	"DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME":                                       10,
	"DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE":                                11,
	"TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN":                               12,
	"UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION":                                     13,
	"UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG":                           14,
	"UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED":                                 15,
	"TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN":                                     16,
	"TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN":                                       17,
	"MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN":                                            18,
	"TOO_MANY_EXCLAMATION_MARKS":                                                               19,
}

func (x SettingErrorEnum_SettingError) String() string {
	return proto.EnumName(SettingErrorEnum_SettingError_name, int32(x))
}

func (SettingErrorEnum_SettingError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_752343a1d62a5cad, []int{0, 0}
}

// Container for enum describing possible setting errors.
type SettingErrorEnum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettingErrorEnum) Reset()         { *m = SettingErrorEnum{} }
func (m *SettingErrorEnum) String() string { return proto.CompactTextString(m) }
func (*SettingErrorEnum) ProtoMessage()    {}
func (*SettingErrorEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_752343a1d62a5cad, []int{0}
}

func (m *SettingErrorEnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettingErrorEnum.Unmarshal(m, b)
}
func (m *SettingErrorEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettingErrorEnum.Marshal(b, m, deterministic)
}
func (m *SettingErrorEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingErrorEnum.Merge(m, src)
}
func (m *SettingErrorEnum) XXX_Size() int {
	return xxx_messageInfo_SettingErrorEnum.Size(m)
}
func (m *SettingErrorEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingErrorEnum.DiscardUnknown(m)
}

var xxx_messageInfo_SettingErrorEnum proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("google.ads.googleads.v1.errors.SettingErrorEnum_SettingError", SettingErrorEnum_SettingError_name, SettingErrorEnum_SettingError_value)
	proto.RegisterType((*SettingErrorEnum)(nil), "google.ads.googleads.v1.errors.SettingErrorEnum")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v1/errors/setting_error.proto", fileDescriptor_752343a1d62a5cad)
}

var fileDescriptor_752343a1d62a5cad = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xd1, 0x8e, 0xdb, 0x44,
	0x14, 0x86, 0xd9, 0x2d, 0xb4, 0xcb, 0x6c, 0xa1, 0xd3, 0xe1, 0xae, 0x82, 0x95, 0xd8, 0x6b, 0x70,
	0x48, 0x41, 0x50, 0x5c, 0x28, 0x3a, 0xf6, 0x9c, 0x75, 0x46, 0x1d, 0xcf, 0x18, 0xcf, 0x38, 0xdb,
	0xa0, 0x48, 0x47, 0x81, 0x44, 0x51, 0xa4, 0x36, 0x5e, 0xc5, 0xa1, 0x0f, 0xc4, 0x1d, 0x3c, 0x04,
	0x0f, 0xc0, 0xa3, 0x20, 0x1e, 0x02, 0x8d, 0xdd, 0xb8, 0x91, 0x9a, 0x76, 0xdb, 0xab, 0x4c, 0xc6,
	0xff, 0xf7, 0x9f, 0xf1, 0xef, 0x33, 0x87, 0xdd, 0x5f, 0xd6, 0xf5, 0xf2, 0xe9, 0x62, 0x30, 0x9b,
	0x37, 0x83, 0x6e, 0x19, 0x56, 0xcf, 0x87, 0x83, 0xc5, 0x66, 0x53, 0x6f, 0x9a, 0x41, 0xb3, 0xd8,
	0x6e, 0x57, 0xeb, 0x25, 0xb5, 0x7f, 0xa3, 0xab, 0x4d, 0xbd, 0xad, 0xc5, 0x59, 0x27, 0x8c, 0x66,
	0xf3, 0x26, 0xea, 0x99, 0xe8, 0xf9, 0x30, 0xea, 0x98, 0x7b, 0x9f, 0xee, 0x3c, 0xaf, 0x56, 0x83,
	0xd9, 0x7a, 0x5d, 0x6f, 0x67, 0xdb, 0x55, 0xbd, 0x6e, 0x3a, 0xfa, 0xfc, 0xef, 0x13, 0xc6, 0x5d,
	0xe7, 0x8a, 0x41, 0x8f, 0xeb, 0xdf, 0x9f, 0x9d, 0xff, 0x79, 0xc2, 0x6e, 0xef, 0x6f, 0x8a, 0x3b,
	0xec, 0xb4, 0x32, 0xae, 0xc0, 0x54, 0x5d, 0x28, 0x94, 0xfc, 0x3d, 0x71, 0xca, 0x6e, 0x55, 0xe6,
	0xb1, 0xb1, 0x97, 0x86, 0x1f, 0x89, 0xcf, 0xd9, 0x67, 0x0e, 0xbd, 0x57, 0x26, 0x23, 0x3f, 0x29,
	0x90, 0x94, 0x23, 0x63, 0x3d, 0xc1, 0x18, 0x94, 0x86, 0x44, 0x23, 0xbf, 0x21, 0xbe, 0x62, 0x5f,
	0x1c, 0x92, 0xa4, 0x36, 0x2f, 0xc0, 0xab, 0x44, 0x23, 0x5d, 0x2a, 0x3f, 0xa2, 0x14, 0xf2, 0x02,
	0x54, 0x66, 0xf8, 0xfb, 0xe2, 0x21, 0xfb, 0xce, 0x43, 0x99, 0x61, 0xcb, 0xec, 0xd8, 0xd4, 0x1a,
	0x0f, 0xca, 0x38, 0x52, 0x66, 0x0c, 0x5a, 0x49, 0x4a, 0x4b, 0xe5, 0xb1, 0x54, 0xd6, 0x74, 0xb6,
	0x59, 0x69, 0xab, 0x82, 0x7f, 0x20, 0x7e, 0x66, 0xf9, 0xab, 0xb0, 0xc4, 0xdc, 0x66, 0x25, 0x14,
	0x23, 0x95, 0x1e, 0xe4, 0x1c, 0xe5, 0x95, 0xf3, 0x94, 0x60, 0x20, 0xc8, 0x5b, 0xea, 0x2c, 0x08,
	0xb4, 0xe6, 0x37, 0xc5, 0x94, 0x3d, 0x39, 0x70, 0x1e, 0x30, 0xed, 0x6b, 0x8c, 0xc0, 0x64, 0xb8,
	0xa7, 0x0f, 0xf4, 0x05, 0x68, 0x87, 0x74, 0x61, 0xcb, 0x6b, 0x0b, 0xf3, 0x5b, 0x22, 0x65, 0x3f,
	0xc9, 0x89, 0x81, 0x5c, 0xa5, 0xe4, 0x10, 0xca, 0x74, 0x44, 0x20, 0x5d, 0x5f, 0x06, 0x3c, 0x69,
	0x04, 0xe7, 0xc9, 0x1a, 0xa4, 0x0b, 0x44, 0x49, 0x4a, 0xf6, 0x87, 0x2d, 0x4a, 0x74, 0x68, 0x3c,
	0x3f, 0x09, 0x91, 0xbd, 0xc1, 0xe4, 0x95, 0xec, 0xa4, 0xcd, 0x41, 0x19, 0x32, 0x90, 0x23, 0xff,
	0x50, 0x7c, 0xcb, 0xee, 0xbf, 0x0d, 0xec, 0xaa, 0x64, 0x9f, 0x63, 0xe2, 0x47, 0xf6, 0xfd, 0xbb,
	0x14, 0xd5, 0x60, 0xb2, 0x0a, 0x32, 0xa4, 0xd4, 0x4a, 0xe4, 0xa7, 0xe2, 0x11, 0x8b, 0xf7, 0x62,
	0xdb, 0x75, 0x8e, 0xd6, 0xf6, 0x12, 0x65, 0x1b, 0x5e, 0xa1, 0x21, 0xc5, 0x1c, 0x8d, 0x27, 0x65,
	0x76, 0x15, 0xfa, 0x36, 0xb9, 0x2d, 0x1e, 0xb0, 0x6f, 0x2a, 0xa3, 0xc6, 0x58, 0x3a, 0xd0, 0x04,
	0x45, 0xd1, 0x3f, 0x7b, 0xf9, 0xd9, 0xab, 0x42, 0xab, 0x14, 0x3c, 0x92, 0x44, 0x97, 0x96, 0xaa,
	0xf0, 0xca, 0x1a, 0xfe, 0x91, 0x48, 0xd8, 0xa3, 0xeb, 0xc8, 0x97, 0x7a, 0xd2, 0xca, 0x84, 0x1e,
	0x95, 0x7e, 0x44, 0xde, 0x5a, 0xd2, 0xd6, 0x64, 0xfc, 0x63, 0xf1, 0x03, 0x7b, 0x70, 0x8d, 0x47,
	0xd8, 0x0c, 0x7d, 0xda, 0x35, 0x4a, 0x82, 0x94, 0x5b, 0xd9, 0x5d, 0xa2, 0x3b, 0xe1, 0xec, 0xc1,
	0x2b, 0x07, 0x33, 0xa1, 0x89, 0xad, 0x7c, 0x15, 0x1e, 0xa3, 0x54, 0x40, 0x4a, 0x86, 0xc4, 0xe8,
	0xb0, 0x37, 0xe7, 0xe1, 0x63, 0xf5, 0xa4, 0xca, 0x43, 0x9c, 0x6f, 0xc3, 0xdd, 0x15, 0x43, 0xf6,
	0xe5, 0x0b, 0xa1, 0xd9, 0xbb, 0x7a, 0x21, 0xe6, 0xd7, 0x20, 0x42, 0x9c, 0xb1, 0x7b, 0x7d, 0x29,
	0x7c, 0x92, 0x6a, 0xc8, 0xa1, 0x0d, 0x24, 0x87, 0xf2, 0xb1, 0xe3, 0x9f, 0x24, 0xff, 0x1d, 0xb1,
	0xf3, 0xdf, 0xea, 0x67, 0xd1, 0x9b, 0xa7, 0x50, 0x72, 0x77, 0x7f, 0x9e, 0x14, 0x61, 0xf4, 0x14,
	0x47, 0xbf, 0xc8, 0x17, 0xd0, 0xb2, 0x7e, 0x3a, 0x5b, 0x2f, 0xa3, 0x7a, 0xb3, 0x1c, 0x2c, 0x17,
	0xeb, 0x76, 0x30, 0xed, 0xc6, 0xdf, 0xd5, 0xaa, 0x79, 0xdd, 0x34, 0x7c, 0xd8, 0xfd, 0xfc, 0x71,
	0x7c, 0x23, 0x03, 0xf8, 0xeb, 0xf8, 0x2c, 0xeb, 0xcc, 0x60, 0xde, 0x44, 0xdd, 0x32, 0xac, 0xc6,
	0xc3, 0xa8, 0x2d, 0xd9, 0xfc, 0xb3, 0x13, 0x4c, 0x61, 0xde, 0x4c, 0x7b, 0xc1, 0x74, 0x3c, 0x9c,
	0x76, 0x82, 0x7f, 0x8f, 0xcf, 0xbb, 0xdd, 0x38, 0x86, 0x79, 0x13, 0xc7, 0xbd, 0x24, 0x8e, 0xc7,
	0xc3, 0x38, 0xee, 0x44, 0xbf, 0xde, 0x6c, 0x4f, 0xf7, 0xf5, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x83, 0x90, 0xd3, 0xfd, 0xaa, 0x05, 0x00, 0x00,
}
