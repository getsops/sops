// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v1/errors/media_upload_error.proto

package errors

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Enum describing possible media uploading errors.
type MediaUploadErrorEnum_MediaUploadError int32

const (
	// Enum unspecified.
	MediaUploadErrorEnum_UNSPECIFIED MediaUploadErrorEnum_MediaUploadError = 0
	// The received error code is not known in this version.
	MediaUploadErrorEnum_UNKNOWN MediaUploadErrorEnum_MediaUploadError = 1
	// The uploaded file is too big.
	MediaUploadErrorEnum_FILE_TOO_BIG MediaUploadErrorEnum_MediaUploadError = 2
	// Image data is unparseable.
	MediaUploadErrorEnum_UNPARSEABLE_IMAGE MediaUploadErrorEnum_MediaUploadError = 3
	// Animated images are not allowed.
	MediaUploadErrorEnum_ANIMATED_IMAGE_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 4
	// The image or media bundle format is not allowed.
	MediaUploadErrorEnum_FORMAT_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 5
)

var MediaUploadErrorEnum_MediaUploadError_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "UNKNOWN",
	2: "FILE_TOO_BIG",
	3: "UNPARSEABLE_IMAGE",
	4: "ANIMATED_IMAGE_NOT_ALLOWED",
	5: "FORMAT_NOT_ALLOWED",
}

var MediaUploadErrorEnum_MediaUploadError_value = map[string]int32{
	"UNSPECIFIED":                0,
	"UNKNOWN":                    1,
	"FILE_TOO_BIG":               2,
	"UNPARSEABLE_IMAGE":          3,
	"ANIMATED_IMAGE_NOT_ALLOWED": 4,
	"FORMAT_NOT_ALLOWED":         5,
}

func (x MediaUploadErrorEnum_MediaUploadError) String() string {
	return proto.EnumName(MediaUploadErrorEnum_MediaUploadError_name, int32(x))
}

func (MediaUploadErrorEnum_MediaUploadError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8a75598d47dda1f, []int{0, 0}
}

// Container for enum describing possible media uploading errors.
type MediaUploadErrorEnum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaUploadErrorEnum) Reset()         { *m = MediaUploadErrorEnum{} }
func (m *MediaUploadErrorEnum) String() string { return proto.CompactTextString(m) }
func (*MediaUploadErrorEnum) ProtoMessage()    {}
func (*MediaUploadErrorEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8a75598d47dda1f, []int{0}
}

func (m *MediaUploadErrorEnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaUploadErrorEnum.Unmarshal(m, b)
}
func (m *MediaUploadErrorEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaUploadErrorEnum.Marshal(b, m, deterministic)
}
func (m *MediaUploadErrorEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaUploadErrorEnum.Merge(m, src)
}
func (m *MediaUploadErrorEnum) XXX_Size() int {
	return xxx_messageInfo_MediaUploadErrorEnum.Size(m)
}
func (m *MediaUploadErrorEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaUploadErrorEnum.DiscardUnknown(m)
}

var xxx_messageInfo_MediaUploadErrorEnum proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("google.ads.googleads.v1.errors.MediaUploadErrorEnum_MediaUploadError", MediaUploadErrorEnum_MediaUploadError_name, MediaUploadErrorEnum_MediaUploadError_value)
	proto.RegisterType((*MediaUploadErrorEnum)(nil), "google.ads.googleads.v1.errors.MediaUploadErrorEnum")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v1/errors/media_upload_error.proto", fileDescriptor_b8a75598d47dda1f)
}

var fileDescriptor_b8a75598d47dda1f = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x6a, 0xab, 0x40,
	0x18, 0xc5, 0xaf, 0xe6, 0xfe, 0x81, 0xc9, 0x85, 0xda, 0xa1, 0xe9, 0x22, 0x94, 0x2c, 0x7c, 0x80,
	0x11, 0xe9, 0xa2, 0x30, 0x5d, 0x8d, 0x75, 0x22, 0x52, 0xff, 0x91, 0x68, 0x02, 0x45, 0x10, 0xdb,
	0x11, 0x11, 0x12, 0x47, 0x9c, 0x24, 0xef, 0xd1, 0x57, 0xe8, 0x32, 0x8f, 0xd2, 0x47, 0xe9, 0xaa,
	0x8f, 0x50, 0x74, 0x9a, 0x40, 0x03, 0xed, 0xca, 0xc3, 0xf1, 0x77, 0x8e, 0xdf, 0xf7, 0x09, 0x6e,
	0x4a, 0xce, 0xcb, 0x55, 0x61, 0xe4, 0x4c, 0x18, 0x52, 0x76, 0x6a, 0x67, 0x1a, 0x45, 0xdb, 0xf2,
	0x56, 0x18, 0xeb, 0x82, 0x55, 0x79, 0xb6, 0x6d, 0x56, 0x3c, 0x67, 0x59, 0xef, 0xa1, 0xa6, 0xe5,
	0x1b, 0x0e, 0x27, 0x92, 0x46, 0x39, 0x13, 0xe8, 0x18, 0x44, 0x3b, 0x13, 0xc9, 0xe0, 0xf8, 0xea,
	0x50, 0xdc, 0x54, 0x46, 0x5e, 0xd7, 0x7c, 0x93, 0x6f, 0x2a, 0x5e, 0x0b, 0x99, 0xd6, 0xf7, 0x0a,
	0xb8, 0xf0, 0xbb, 0xea, 0xa4, 0x6f, 0xa6, 0x5d, 0x86, 0xd6, 0xdb, 0xb5, 0xfe, 0xac, 0x00, 0xed,
	0xf4, 0x05, 0x3c, 0x03, 0xc3, 0x24, 0x98, 0x47, 0xf4, 0xce, 0x9d, 0xba, 0xd4, 0xd6, 0x7e, 0xc1,
	0x21, 0xf8, 0x97, 0x04, 0xf7, 0x41, 0xb8, 0x0c, 0x34, 0x05, 0x6a, 0xe0, 0xff, 0xd4, 0xf5, 0x68,
	0x16, 0x87, 0x61, 0x66, 0xb9, 0x8e, 0xa6, 0xc2, 0x11, 0x38, 0x4f, 0x82, 0x88, 0xcc, 0xe6, 0x94,
	0x58, 0x1e, 0xcd, 0x5c, 0x9f, 0x38, 0x54, 0x1b, 0xc0, 0x09, 0x18, 0x93, 0xc0, 0xf5, 0x49, 0x4c,
	0x6d, 0xe9, 0x65, 0x41, 0x18, 0x67, 0xc4, 0xf3, 0xc2, 0x25, 0xb5, 0xb5, 0xdf, 0xf0, 0x12, 0xc0,
	0x69, 0x38, 0xf3, 0x49, 0xfc, 0xc5, 0xff, 0x63, 0xbd, 0x2b, 0x40, 0x7f, 0xe2, 0x6b, 0xf4, 0xf3,
	0xc6, 0xd6, 0xe8, 0x74, 0xee, 0xa8, 0x5b, 0x35, 0x52, 0x1e, 0xec, 0xcf, 0x60, 0xc9, 0x57, 0x79,
	0x5d, 0x22, 0xde, 0x96, 0x46, 0x59, 0xd4, 0xfd, 0x21, 0x0e, 0x37, 0x6f, 0x2a, 0xf1, 0xdd, 0x2f,
	0xb8, 0x95, 0x8f, 0x17, 0x75, 0xe0, 0x10, 0xb2, 0x57, 0x27, 0x8e, 0x2c, 0x23, 0x4c, 0x20, 0x29,
	0x3b, 0xb5, 0x30, 0x51, 0xff, 0x49, 0xf1, 0x7a, 0x00, 0x52, 0xc2, 0x44, 0x7a, 0x04, 0xd2, 0x85,
	0x99, 0x4a, 0xe0, 0x4d, 0xd5, 0xa5, 0x8b, 0x31, 0x61, 0x02, 0xe3, 0x23, 0x82, 0xf1, 0xc2, 0xc4,
	0x58, 0x42, 0x8f, 0x7f, 0xfb, 0xe9, 0xae, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x14, 0x70, 0xd8,
	0xc2, 0x1f, 0x02, 0x00, 0x00,
}
