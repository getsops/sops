// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v1/errors/media_file_error.proto

package errors

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Enum describing possible media file errors.
type MediaFileErrorEnum_MediaFileError int32

const (
	// Enum unspecified.
	MediaFileErrorEnum_UNSPECIFIED MediaFileErrorEnum_MediaFileError = 0
	// The received error code is not known in this version.
	MediaFileErrorEnum_UNKNOWN MediaFileErrorEnum_MediaFileError = 1
	// Cannot create a standard icon type.
	MediaFileErrorEnum_CANNOT_CREATE_STANDARD_ICON MediaFileErrorEnum_MediaFileError = 2
	// May only select Standard Icons alone.
	MediaFileErrorEnum_CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES MediaFileErrorEnum_MediaFileError = 3
	// Image contains both a media file ID and data.
	MediaFileErrorEnum_CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA MediaFileErrorEnum_MediaFileError = 4
	// A media file with given type and reference ID already exists.
	MediaFileErrorEnum_DUPLICATE_MEDIA MediaFileErrorEnum_MediaFileError = 5
	// A required field was not specified or is an empty string.
	MediaFileErrorEnum_EMPTY_FIELD MediaFileErrorEnum_MediaFileError = 6
	// A media file may only be modified once per call.
	MediaFileErrorEnum_RESOURCE_REFERENCED_IN_MULTIPLE_OPS MediaFileErrorEnum_MediaFileError = 7
	// Field is not supported for the media sub type.
	MediaFileErrorEnum_FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE MediaFileErrorEnum_MediaFileError = 8
	// The media file ID is invalid.
	MediaFileErrorEnum_INVALID_MEDIA_FILE_ID MediaFileErrorEnum_MediaFileError = 9
	// The media subtype is invalid.
	MediaFileErrorEnum_INVALID_MEDIA_SUB_TYPE MediaFileErrorEnum_MediaFileError = 10
	// The media file type is invalid.
	MediaFileErrorEnum_INVALID_MEDIA_FILE_TYPE MediaFileErrorEnum_MediaFileError = 11
	// The mimetype is invalid.
	MediaFileErrorEnum_INVALID_MIME_TYPE MediaFileErrorEnum_MediaFileError = 12
	// The media reference ID is invalid.
	MediaFileErrorEnum_INVALID_REFERENCE_ID MediaFileErrorEnum_MediaFileError = 13
	// The YouTube video ID is invalid.
	MediaFileErrorEnum_INVALID_YOU_TUBE_ID MediaFileErrorEnum_MediaFileError = 14
	// Media file has failed transcoding
	MediaFileErrorEnum_MEDIA_FILE_FAILED_TRANSCODING MediaFileErrorEnum_MediaFileError = 15
	// Media file has not been transcoded.
	MediaFileErrorEnum_MEDIA_NOT_TRANSCODED MediaFileErrorEnum_MediaFileError = 16
	// The media type does not match the actual media file's type.
	MediaFileErrorEnum_MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE MediaFileErrorEnum_MediaFileError = 17
	// None of the fields have been specified.
	MediaFileErrorEnum_NO_FIELDS_SPECIFIED MediaFileErrorEnum_MediaFileError = 18
	// One of reference ID or media file ID must be specified.
	MediaFileErrorEnum_NULL_REFERENCE_ID_AND_MEDIA_ID MediaFileErrorEnum_MediaFileError = 19
	// The string has too many characters.
	MediaFileErrorEnum_TOO_LONG MediaFileErrorEnum_MediaFileError = 20
	// The specified type is not supported.
	MediaFileErrorEnum_UNSUPPORTED_TYPE MediaFileErrorEnum_MediaFileError = 21
	// YouTube is unavailable for requesting video data.
	MediaFileErrorEnum_YOU_TUBE_SERVICE_UNAVAILABLE MediaFileErrorEnum_MediaFileError = 22
	// The YouTube video has a non positive duration.
	MediaFileErrorEnum_YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION MediaFileErrorEnum_MediaFileError = 23
	// The YouTube video ID is syntactically valid but the video was not found.
	MediaFileErrorEnum_YOU_TUBE_VIDEO_NOT_FOUND MediaFileErrorEnum_MediaFileError = 24
)

var MediaFileErrorEnum_MediaFileError_name = map[int32]string{
	0:  "UNSPECIFIED",
	1:  "UNKNOWN",
	2:  "CANNOT_CREATE_STANDARD_ICON",
	3:  "CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES",
	4:  "CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA",
	5:  "DUPLICATE_MEDIA",
	6:  "EMPTY_FIELD",
	7:  "RESOURCE_REFERENCED_IN_MULTIPLE_OPS",
	8:  "FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE",
	9:  "INVALID_MEDIA_FILE_ID",
	10: "INVALID_MEDIA_SUB_TYPE",
	11: "INVALID_MEDIA_FILE_TYPE",
	12: "INVALID_MIME_TYPE",
	13: "INVALID_REFERENCE_ID",
	14: "INVALID_YOU_TUBE_ID",
	15: "MEDIA_FILE_FAILED_TRANSCODING",
	16: "MEDIA_NOT_TRANSCODED",
	17: "MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE",
	18: "NO_FIELDS_SPECIFIED",
	19: "NULL_REFERENCE_ID_AND_MEDIA_ID",
	20: "TOO_LONG",
	21: "UNSUPPORTED_TYPE",
	22: "YOU_TUBE_SERVICE_UNAVAILABLE",
	23: "YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION",
	24: "YOU_TUBE_VIDEO_NOT_FOUND",
}

var MediaFileErrorEnum_MediaFileError_value = map[string]int32{
	"UNSPECIFIED":                 0,
	"UNKNOWN":                     1,
	"CANNOT_CREATE_STANDARD_ICON": 2,
	"CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES": 3,
	"CANNOT_SPECIFY_MEDIA_FILE_ID_AND_DATA":        4,
	"DUPLICATE_MEDIA":                              5,
	"EMPTY_FIELD":                                  6,
	"RESOURCE_REFERENCED_IN_MULTIPLE_OPS":          7,
	"FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE":       8,
	"INVALID_MEDIA_FILE_ID":                        9,
	"INVALID_MEDIA_SUB_TYPE":                       10,
	"INVALID_MEDIA_FILE_TYPE":                      11,
	"INVALID_MIME_TYPE":                            12,
	"INVALID_REFERENCE_ID":                         13,
	"INVALID_YOU_TUBE_ID":                          14,
	"MEDIA_FILE_FAILED_TRANSCODING":                15,
	"MEDIA_NOT_TRANSCODED":                         16,
	"MEDIA_TYPE_DOES_NOT_MATCH_MEDIA_FILE_TYPE":    17,
	"NO_FIELDS_SPECIFIED":                          18,
	"NULL_REFERENCE_ID_AND_MEDIA_ID":               19,
	"TOO_LONG":                                     20,
	"UNSUPPORTED_TYPE":                             21,
	"YOU_TUBE_SERVICE_UNAVAILABLE":                 22,
	"YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION":     23,
	"YOU_TUBE_VIDEO_NOT_FOUND":                     24,
}

func (x MediaFileErrorEnum_MediaFileError) String() string {
	return proto.EnumName(MediaFileErrorEnum_MediaFileError_name, int32(x))
}

func (MediaFileErrorEnum_MediaFileError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8beb6ca4c6065079, []int{0, 0}
}

// Container for enum describing possible media file errors.
type MediaFileErrorEnum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaFileErrorEnum) Reset()         { *m = MediaFileErrorEnum{} }
func (m *MediaFileErrorEnum) String() string { return proto.CompactTextString(m) }
func (*MediaFileErrorEnum) ProtoMessage()    {}
func (*MediaFileErrorEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_8beb6ca4c6065079, []int{0}
}

func (m *MediaFileErrorEnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaFileErrorEnum.Unmarshal(m, b)
}
func (m *MediaFileErrorEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaFileErrorEnum.Marshal(b, m, deterministic)
}
func (m *MediaFileErrorEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaFileErrorEnum.Merge(m, src)
}
func (m *MediaFileErrorEnum) XXX_Size() int {
	return xxx_messageInfo_MediaFileErrorEnum.Size(m)
}
func (m *MediaFileErrorEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaFileErrorEnum.DiscardUnknown(m)
}

var xxx_messageInfo_MediaFileErrorEnum proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("google.ads.googleads.v1.errors.MediaFileErrorEnum_MediaFileError", MediaFileErrorEnum_MediaFileError_name, MediaFileErrorEnum_MediaFileError_value)
	proto.RegisterType((*MediaFileErrorEnum)(nil), "google.ads.googleads.v1.errors.MediaFileErrorEnum")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v1/errors/media_file_error.proto", fileDescriptor_8beb6ca4c6065079)
}

var fileDescriptor_8beb6ca4c6065079 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x9a, 0x7e, 0xa4, 0x65, 0x5a, 0xda, 0xe9, 0xa4, 0x7f, 0xb4, 0xa5, 0x40, 0x10, 0x3f,
	0x45, 0xc5, 0x21, 0x42, 0x6c, 0xcc, 0x6a, 0xe2, 0xb9, 0x4e, 0x46, 0x38, 0x33, 0x96, 0x3d, 0x76,
	0x15, 0x14, 0x69, 0x14, 0x48, 0x88, 0x22, 0xa5, 0x71, 0x15, 0x97, 0xae, 0x79, 0x0b, 0xf6, 0x2c,
	0x79, 0x14, 0x1e, 0x85, 0x05, 0xcf, 0x80, 0xec, 0x49, 0x5c, 0xc2, 0xdf, 0x2a, 0x57, 0xf7, 0x9c,
	0x73, 0xcf, 0xb9, 0x13, 0x5f, 0xf4, 0x72, 0x98, 0x24, 0xc3, 0xf1, 0xa0, 0xd6, 0xeb, 0xa7, 0x35,
	0x53, 0x66, 0xd5, 0x55, 0xbd, 0x36, 0x98, 0x4e, 0x93, 0x69, 0x5a, 0x3b, 0x1f, 0xf4, 0x47, 0x3d,
	0xfd, 0x7e, 0x34, 0x1e, 0xe8, 0xbc, 0x63, 0x5d, 0x4c, 0x93, 0xcb, 0x84, 0x1c, 0x1b, 0xae, 0xd5,
	0xeb, 0xa7, 0x56, 0x21, 0xb3, 0xae, 0xea, 0x96, 0x91, 0x1d, 0x1c, 0xcd, 0xc7, 0x5e, 0x8c, 0x6a,
	0xbd, 0xc9, 0x24, 0xb9, 0xec, 0x5d, 0x8e, 0x92, 0x49, 0x6a, 0xd4, 0xd5, 0x4f, 0x65, 0x44, 0xda,
	0xd9, 0x60, 0x77, 0x34, 0x1e, 0x40, 0xa6, 0x80, 0xc9, 0x87, 0xf3, 0xea, 0xc7, 0x32, 0xda, 0x58,
	0x6c, 0x93, 0x4d, 0xb4, 0x16, 0x89, 0xd0, 0x07, 0x87, 0xbb, 0x1c, 0x18, 0xfe, 0x8f, 0xac, 0xa1,
	0x95, 0x48, 0xbc, 0x16, 0xf2, 0x4c, 0xe0, 0x25, 0x72, 0x17, 0x1d, 0x3a, 0x54, 0x08, 0xa9, 0xb4,
	0x13, 0x00, 0x55, 0xa0, 0x43, 0x45, 0x05, 0xa3, 0x01, 0xd3, 0xdc, 0x91, 0x02, 0x97, 0xc8, 0x73,
	0x74, 0x3a, 0x23, 0x84, 0xe0, 0x81, 0xa3, 0x16, 0x09, 0xfa, 0x8c, 0xab, 0x96, 0x96, 0xaa, 0x05,
	0x81, 0x56, 0x1d, 0x1f, 0x42, 0xbc, 0x4c, 0x4e, 0xd0, 0xc3, 0xb9, 0x22, 0x77, 0xed, 0xe8, 0x36,
	0x30, 0x4e, 0xb5, 0xcb, 0x3d, 0xd0, 0x9c, 0x69, 0x2a, 0x98, 0x66, 0x54, 0x51, 0xfc, 0x3f, 0xa9,
	0xa0, 0x4d, 0x16, 0xf9, 0x1e, 0x77, 0x32, 0xe7, 0x9c, 0x85, 0x6f, 0x64, 0x81, 0xa1, 0xed, 0xab,
	0x8e, 0x76, 0x39, 0x78, 0x0c, 0x97, 0xc9, 0x63, 0xf4, 0x20, 0x80, 0x50, 0x46, 0x81, 0x03, 0x3a,
	0x00, 0x17, 0x02, 0x10, 0x0e, 0x30, 0xcd, 0x85, 0x6e, 0x47, 0x9e, 0xe2, 0xbe, 0x07, 0x5a, 0xfa,
	0x21, 0x5e, 0x21, 0x4f, 0xd1, 0xa3, 0x5c, 0xa3, 0x73, 0xf3, 0xc8, 0xf7, 0x65, 0xa0, 0x80, 0x69,
	0x57, 0x06, 0xb3, 0x08, 0x61, 0xd4, 0xc8, 0x63, 0xe2, 0x55, 0x72, 0x1b, 0xed, 0x70, 0x11, 0x53,
	0x8f, 0xb3, 0xc5, 0x78, 0xf8, 0x26, 0x39, 0x40, 0xbb, 0x8b, 0x50, 0x21, 0x43, 0xe4, 0x10, 0xed,
	0xfd, 0x41, 0x96, 0x83, 0x6b, 0x64, 0x07, 0x6d, 0x15, 0x20, 0x6f, 0xcf, 0xda, 0xeb, 0x64, 0x1f,
	0x6d, 0xcf, 0xdb, 0x45, 0xfc, 0xcc, 0xe9, 0x16, 0xd9, 0x43, 0x95, 0x39, 0xd2, 0x91, 0x91, 0x56,
	0x51, 0x23, 0x07, 0x36, 0xc8, 0x7d, 0x74, 0xe7, 0xa7, 0xf1, 0x2e, 0xe5, 0x1e, 0x30, 0xad, 0x02,
	0x2a, 0x42, 0x47, 0x32, 0x2e, 0x9a, 0x78, 0x33, 0x9b, 0x6a, 0x28, 0xd9, 0xb2, 0x73, 0x08, 0x18,
	0xc6, 0xe4, 0x19, 0x3a, 0x31, 0x48, 0xe6, 0xaf, 0x99, 0x84, 0x30, 0xe7, 0xb4, 0xa9, 0x72, 0x5a,
	0xbf, 0xa5, 0xde, 0xca, 0x42, 0x08, 0x69, 0x1e, 0x3b, 0xd4, 0xd7, 0x1f, 0x0a, 0x21, 0x55, 0x74,
	0x2c, 0x22, 0xcf, 0x5b, 0x08, 0x9d, 0xff, 0x7b, 0x66, 0x06, 0x67, 0xb8, 0x42, 0xd6, 0xd1, 0xaa,
	0x92, 0x52, 0x7b, 0x52, 0x34, 0xf1, 0x36, 0xd9, 0x46, 0x38, 0x12, 0xd7, 0x0f, 0x9f, 0x1b, 0xec,
	0x90, 0x7b, 0xe8, 0xa8, 0xd8, 0x2e, 0x84, 0x20, 0xe6, 0x0e, 0xe8, 0x48, 0xd0, 0x98, 0x72, 0x8f,
	0x36, 0x3c, 0xc0, 0xbb, 0xe4, 0x14, 0x3d, 0x29, 0x18, 0x31, 0x67, 0x20, 0x75, 0x8b, 0x66, 0xa1,
	0x85, 0xf6, 0x65, 0xc8, 0x15, 0x8f, 0x41, 0xb3, 0x28, 0xa0, 0x8a, 0x4b, 0x81, 0xf7, 0xc8, 0x11,
	0xda, 0xff, 0x85, 0x9d, 0xad, 0xe7, 0xca, 0x48, 0x30, 0xbc, 0xdf, 0xf8, 0xbe, 0x84, 0xaa, 0xef,
	0x92, 0x73, 0xeb, 0xdf, 0xe7, 0xd5, 0xa8, 0x2c, 0x9e, 0x89, 0x9f, 0x5d, 0x95, 0xbf, 0xf4, 0x86,
	0xcd, 0x64, 0xc3, 0x64, 0xdc, 0x9b, 0x0c, 0xad, 0x64, 0x3a, 0xac, 0x0d, 0x07, 0x93, 0xfc, 0xe6,
	0xe6, 0xc7, 0x7d, 0x31, 0x4a, 0xff, 0x76, 0xeb, 0xaf, 0xcc, 0xcf, 0xe7, 0xd2, 0x72, 0x93, 0xd2,
	0x2f, 0xa5, 0xe3, 0xa6, 0x19, 0x46, 0xfb, 0xa9, 0x65, 0xca, 0xac, 0x8a, 0xeb, 0x56, 0x6e, 0x99,
	0x7e, 0x9d, 0x13, 0xba, 0xb4, 0x9f, 0x76, 0x0b, 0x42, 0x37, 0xae, 0x77, 0x0d, 0xe1, 0x5b, 0xa9,
	0x6a, 0xba, 0xb6, 0x4d, 0xfb, 0xa9, 0x6d, 0x17, 0x14, 0xdb, 0x8e, 0xeb, 0xb6, 0x6d, 0x48, 0x6f,
	0xcb, 0x79, 0xba, 0x17, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xd7, 0xc6, 0xf8, 0x88, 0x04,
	0x00, 0x00,
}
