// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/devtools/containeranalysis/v1/containeranalysis.proto

package containeranalysis

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/iam/v1"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("google/devtools/containeranalysis/v1/containeranalysis.proto", fileDescriptor_e74edb4ed33b4f81)
}

var fileDescriptor_e74edb4ed33b4f81 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xc1, 0xca, 0xd3, 0x40,
	0x10, 0xc7, 0x49, 0x45, 0x0f, 0xc1, 0x8b, 0x01, 0x2f, 0x41, 0x2c, 0x04, 0x0f, 0x9a, 0xc3, 0x2e,
	0x51, 0x2f, 0x56, 0x45, 0x6a, 0x85, 0xe0, 0xad, 0x68, 0xf5, 0xd0, 0x8b, 0x6c, 0xb7, 0x63, 0x58,
	0xc9, 0xee, 0xc4, 0xdd, 0x4d, 0xa0, 0x8a, 0x20, 0x1e, 0x7c, 0x01, 0xdf, 0xc0, 0xa3, 0xe0, 0x33,
	0xf8, 0x10, 0xbe, 0x82, 0x47, 0x1f, 0x42, 0xb2, 0xd9, 0x48, 0xdb, 0xf4, 0x2b, 0xe5, 0x83, 0xef,
	0xb8, 0xf3, 0x9f, 0xf9, 0xcf, 0xff, 0x07, 0x3b, 0xe1, 0xa3, 0x02, 0xb1, 0x28, 0x81, 0xae, 0xa1,
	0xb1, 0x88, 0xa5, 0xa1, 0x1c, 0x95, 0x65, 0x42, 0x81, 0x66, 0x8a, 0x95, 0x1b, 0x23, 0x0c, 0x6d,
	0xb2, 0x61, 0x91, 0x54, 0x1a, 0x2d, 0x46, 0xb7, 0xba, 0x69, 0xd2, 0x4f, 0x93, 0x61, 0x63, 0x93,
	0xc5, 0x37, 0xfc, 0x0e, 0x56, 0x09, 0xca, 0x94, 0x42, 0xcb, 0xac, 0x40, 0xe5, 0x3d, 0xe2, 0x9b,
	0x5e, 0x15, 0x4c, 0xb6, 0xab, 0x04, 0x93, 0x6f, 0x2a, 0x2c, 0x05, 0xdf, 0x78, 0x3d, 0xde, 0xd5,
	0x77, 0xb4, 0xb1, 0xd7, 0xdc, 0x6b, 0x55, 0xbf, 0xa5, 0x56, 0x48, 0x30, 0x96, 0xc9, 0xaa, 0x6b,
	0xb8, 0xfb, 0xf5, 0x72, 0x78, 0x6d, 0xd6, 0x67, 0x9a, 0xfa, 0x4c, 0xd1, 0xaf, 0x20, 0xbc, 0xfa,
	0x12, 0xec, 0x73, 0x26, 0xe7, 0xce, 0x2d, 0x4a, 0x88, 0x07, 0x11, 0x4c, 0x92, 0x26, 0x23, 0xdb,
	0xe2, 0x0b, 0x78, 0x5f, 0x83, 0xb1, 0xf1, 0xf5, 0xbd, 0x9e, 0x4e, 0x4d, 0xec, 0x97, 0xdf, 0x7f,
	0xbe, 0x8d, 0x54, 0x42, 0xda, 0x70, 0x1f, 0x35, 0x18, 0xac, 0x35, 0x87, 0xc7, 0x95, 0xc6, 0x77,
	0xc0, 0xad, 0xa1, 0x29, 0x55, 0x68, 0xc1, 0xd0, 0xf4, 0xd3, 0xc4, 0x6c, 0xb9, 0x4e, 0x82, 0x74,
	0xf9, 0x20, 0xb9, 0x7f, 0xe6, 0x10, 0x72, 0x5e, 0x6b, 0x0d, 0x8a, 0x1f, 0x1c, 0x75, 0x04, 0xf9,
	0x31, 0x82, 0xfc, 0x42, 0x08, 0x8a, 0xf3, 0x13, 0xec, 0x8d, 0x46, 0x7f, 0x83, 0x30, 0x5a, 0x80,
	0x71, 0x45, 0xd0, 0x52, 0x18, 0xd3, 0xfe, 0x89, 0xe8, 0xf6, 0x5e, 0xc6, 0x61, 0x4b, 0x4f, 0x73,
	0xe7, 0x84, 0x4e, 0x53, 0xa1, 0x32, 0x90, 0x7c, 0x0e, 0x1c, 0xe2, 0x87, 0x23, 0x69, 0xff, 0x23,
	0xda, 0x81, 0x4d, 0x0b, 0xfa, 0x24, 0x99, 0x9c, 0x0a, 0x7a, 0xd0, 0xe0, 0xe9, 0xcf, 0x20, 0x1c,
	0x73, 0x94, 0x7d, 0xe6, 0x43, 0x77, 0x32, 0x0f, 0x96, 0xaf, 0xbc, 0x5c, 0x60, 0xc9, 0x54, 0x41,
	0x50, 0x17, 0xb4, 0x00, 0xe5, 0xbe, 0x32, 0xed, 0x24, 0x56, 0x09, 0x73, 0xfc, 0x58, 0x1f, 0x0e,
	0x8a, 0xdf, 0x47, 0x97, 0xf2, 0xd9, 0xf4, 0xc7, 0x28, 0xcd, 0x3b, 0xf7, 0x59, 0x89, 0xf5, 0x9a,
	0x3c, 0x83, 0x66, 0xe1, 0x6e, 0x76, 0x70, 0x1f, 0xe4, 0x75, 0xb6, 0xba, 0xe2, 0x96, 0xde, 0xfb,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x99, 0xc7, 0x1e, 0x67, 0x20, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContainerAnalysisClient is the client API for ContainerAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContainerAnalysisClient interface {
	// Sets the access control policy on the specified note or occurrence.
	// Requires `containeranalysis.notes.setIamPolicy` or
	// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
	// a note or an occurrence, respectively.
	//
	// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
	// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
	// occurrences.
	SetIamPolicy(ctx context.Context, in *v1.SetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	// Gets the access control policy for a note or an occurrence resource.
	// Requires `containeranalysis.notes.setIamPolicy` or
	// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
	// a note or occurrence, respectively.
	//
	// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
	// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
	// occurrences.
	GetIamPolicy(ctx context.Context, in *v1.GetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	// Returns the permissions that a caller has on the specified note or
	// occurrence. Requires list permission on the project (for example,
	// `containeranalysis.notes.list`).
	//
	// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
	// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
	// occurrences.
	TestIamPermissions(ctx context.Context, in *v1.TestIamPermissionsRequest, opts ...grpc.CallOption) (*v1.TestIamPermissionsResponse, error)
}

type containerAnalysisClient struct {
	cc *grpc.ClientConn
}

func NewContainerAnalysisClient(cc *grpc.ClientConn) ContainerAnalysisClient {
	return &containerAnalysisClient{cc}
}

func (c *containerAnalysisClient) SetIamPolicy(ctx context.Context, in *v1.SetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/google.devtools.containeranalysis.v1.ContainerAnalysis/SetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerAnalysisClient) GetIamPolicy(ctx context.Context, in *v1.GetIamPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/google.devtools.containeranalysis.v1.ContainerAnalysis/GetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerAnalysisClient) TestIamPermissions(ctx context.Context, in *v1.TestIamPermissionsRequest, opts ...grpc.CallOption) (*v1.TestIamPermissionsResponse, error) {
	out := new(v1.TestIamPermissionsResponse)
	err := c.cc.Invoke(ctx, "/google.devtools.containeranalysis.v1.ContainerAnalysis/TestIamPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerAnalysisServer is the server API for ContainerAnalysis service.
type ContainerAnalysisServer interface {
	// Sets the access control policy on the specified note or occurrence.
	// Requires `containeranalysis.notes.setIamPolicy` or
	// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
	// a note or an occurrence, respectively.
	//
	// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
	// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
	// occurrences.
	SetIamPolicy(context.Context, *v1.SetIamPolicyRequest) (*v1.Policy, error)
	// Gets the access control policy for a note or an occurrence resource.
	// Requires `containeranalysis.notes.setIamPolicy` or
	// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
	// a note or occurrence, respectively.
	//
	// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
	// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
	// occurrences.
	GetIamPolicy(context.Context, *v1.GetIamPolicyRequest) (*v1.Policy, error)
	// Returns the permissions that a caller has on the specified note or
	// occurrence. Requires list permission on the project (for example,
	// `containeranalysis.notes.list`).
	//
	// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
	// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
	// occurrences.
	TestIamPermissions(context.Context, *v1.TestIamPermissionsRequest) (*v1.TestIamPermissionsResponse, error)
}

func RegisterContainerAnalysisServer(s *grpc.Server, srv ContainerAnalysisServer) {
	s.RegisterService(&_ContainerAnalysis_serviceDesc, srv)
}

func _ContainerAnalysis_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerAnalysisServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.containeranalysis.v1.ContainerAnalysis/SetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerAnalysisServer).SetIamPolicy(ctx, req.(*v1.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerAnalysis_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerAnalysisServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.containeranalysis.v1.ContainerAnalysis/GetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerAnalysisServer).GetIamPolicy(ctx, req.(*v1.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerAnalysis_TestIamPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.TestIamPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerAnalysisServer).TestIamPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.devtools.containeranalysis.v1.ContainerAnalysis/TestIamPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerAnalysisServer).TestIamPermissions(ctx, req.(*v1.TestIamPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerAnalysis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.devtools.containeranalysis.v1.ContainerAnalysis",
	HandlerType: (*ContainerAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIamPolicy",
			Handler:    _ContainerAnalysis_SetIamPolicy_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _ContainerAnalysis_GetIamPolicy_Handler,
		},
		{
			MethodName: "TestIamPermissions",
			Handler:    _ContainerAnalysis_TestIamPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/devtools/containeranalysis/v1/containeranalysis.proto",
}
